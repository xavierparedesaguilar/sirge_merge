<?php

namespace App\Controller\Admin;

use App\Controller\Admin\AppController;
use Cake\ORM\TableRegistry;

use Cake\Datasource\loadModel;
//use App\View\Helper\FunctionsHelper;

use Cake\Datasource\ConnectionManager;
use PDO;

//use function PHPSTORM_META\exitPoint;

/**
 * BankInvitro Controller
 *
 * @property \App\Model\Table\BankInvitroTable $BankInvitro
 */
class BankInvitroController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_parent = "Gestión Inventario";
        $this->mod_padre = "Banco In vitro";
        $this->loadModel('Ubigeo');
        $this->loadModel('OptionList');
        $this->loadModel('Passport');
        $this->loadModel('PassportFito');
        $this->loadModel('InputInvitro');
        $this->loadModel('OutputInvitro');
        $this->loadModel('ConservationInvitro');
        $this->loadModel('PropagationInvitro');
        $this->loadModel('TempBankInvitro');
        $this->loadModel('ConfigTable');
        $this->modulo = "Gestión Inventario";
        $this->servidor=false;
        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => $this->name])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {

      if($this->permiso['index']){


          $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
          $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                      'assets/js/datatable/dataTables.bootstrap.min',
                      'assets/js/datatable/dataTables.select.min'];

          $module=$this->module;
          $permiso= $this->permiso;
          $conn = ConnectionManager::get('default');

          $bankInvitro = $this->BankInvitro->find()
                                           ->contain('Passport.Specie.Collection')
                                           ->leftJoinWith('Passport.Specie.Collection')
                                           ->where(['BankInvitro.status !=' => '0'])
                                           ->order(['BankInvitro.lotnumb'=>'DESC'])->all();

          $sql="SELECT 
                A.ID AS 'id',A.LOTNUMB AS 'lotnumb',P.ACCENUMB AS 'accenumb',P.ACCNAME AS 'accname',P.OTHENUMB AS 'othernumb',C.COLNAME AS 'colname',CONCAT(S.GENUS,' ',S.SPECIES) AS 'specie', S.AUTOR AS 'autor',
                S.CROPNAME AS 'cropname', A.ACQDATE AS 'fecha',O.NAME AS 'almacen',CONCAT( A.SHELVING,' - ',A.LEVELSHELV,' - ',A.RACK ) AS 'estanderia', A.TUBENUMB AS 'tubenumb', 
                A.EXPLNUMB AS 'explnumb', A.AVAILABILITY AS 'availability'
                FROM BANK_INVITRO A
                INNER JOIN PASSPORT P ON (P.ID = A.PASSPORT_ID)
                INNER JOIN SPECIE S ON (S.ID = P.SPECIE_ID)
                INNER JOIN COLLECTION C ON(C.ID = S.COLLECTION_ID)
                INNER JOIN OPTION_LIST O ON (O.ID = A.STOROOM)
                WHERE A.STATUS=1 ORDER BY A.LOTNUMB DESC";
          $bankInvitrolist = $conn->prepare($sql);
          $bankInvitrolist->execute();
          

          // $titulo = $this->mod_parent ." - ".$this->mod_padre;
          // $titulo_lista =$this->mod_padre;
          // $this->Flash->success($bankInvitro);

          $this->set(compact('bankInvitro','bankInvitrolist', 'titulo','styles','scripts','titulo_lista','permiso','module'));
          $this->set('_serialize', ['bankInvitro']);

      } else {

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect($this->Auth->redirectUrl());

      }

    }

    /**
     * View method
     *
     * @param string|null $id Bank Invitro id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        if($this->permiso['view']){

              $bankInvitro = $this->BankInvitro->find()->contain('Passport.Specie.Collection')
                                               ->leftJoinWith('Passport.Specie.Collection')
                                               ->where(['BankInvitro.status !=' => '0','BankInvitro.id '=>$id])->first();
              $passport = $this->Passport->find()->where(['id '=>$bankInvitro->passport_id])->first();

              $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

              if($bankInvitro ==NULL){

                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);

              }

                $permiso= $this->permiso;
                $titulo = $this->mod_padre;
                $parent = $this->mod_parent;

                $this->set(compact('bankInvitro','titulo','parent','permiso','validar','passport'));
                $this->set('_serialize', ['bankInvitro']);

          } else {

                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
          }

    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {


          if($this->permiso['add']){

              $bankInvitro = $this->BankInvitro->newEntity();
              $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

              $modulo=$this->mod_padre;

              if ($this->request->is('post')) {

                  $data = $this->request->getData();
                  $data['status'] = '1';
                  $data['bank_availability'] = '1';

                  if($data['tubenumb']!=null && $data['explnumb']!=null)

                      $data['stock']=$data['tubenumb']*$data['explnumb'] ;

                  try{
                      $data['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));

                      $bankInvitro = $this->BankInvitro->patchEntity($bankInvitro, $data);

                      if ($this->BankInvitro->save($bankInvitro)) {

                          /***************** GRABA EL NRO DE LOTE - AUTOGENERADO === ID TABLA *****************/
                          $temp = TableRegistry::get('BankInvitro');
                          $temp_invitro = $temp->get($bankInvitro->id);
                          $temp_invitro->lotnumb = $bankInvitro->id;
                          $temp->save($temp_invitro);

                          $list_module = explode('/', $this->request->params['_matchedRoute']);

                          $user_id    = $this->Auth->User('id');
                          $module     = $list_module[(count($list_module)-2)];
                          $action     = $list_module[(count($list_module)-1)];
                          $station_id = $bankInvitro->id;
                          $recurso_id = '1';

                          $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                          $this->Flash->success('El Registro fue creado satisfactoriamente', ['params' => ['alert' => 'success']]);
                          return $this->redirect(['action' => 'index']);

                      }

                      $this->Flash->error(__('Hubo inconvenientes al crear el Registro. Por favor, Otra vez intente.'));

                      } catch (\Exception $e) {

                          $this->Flash->error(__('Hubo inconvenientes al crear el Registro. Por favor, Otra vez intente.'));
                          return $this->redirect(['action' => 'index']);
                      }
              }

              $tipo_disponibilidad= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 330, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $tipo_conservacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 307, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $conservacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 307, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $temperatura= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 310, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $lista_estado_planta= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 276, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $lista_necrosis= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 282, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $lista_defolacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 287, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $lista_enraizamiento= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 292, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $lista_clorosis= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 297, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $lista_fenolizacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 302, 'status' => 1, 'OR' => [['resource_id' => 4]]  ]);

              $lista_almacenamiento= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 333, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $lista_propagacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 337, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $lista_conservacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 344, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $lista_tamanio_tubo= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 313, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

               $lista_estado_fitosanitario= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 316, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

              $this->set(compact('bankInvitro','modulo','scripts','tipo_disponibilidad','tipo_conservacion','conservacion','temperatura','lista_estado_planta','lista_necrosis','lista_defolacion','lista_enraizamiento','lista_clorosis','lista_fenolizacion','lista_almacenamiento','lista_propagacion','lista_conservacion','lista_tamanio_tubo','lista_estado_fitosanitario'));

              $this->set('_serialize', ['bankInvitro']);

           } else {
                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
          }


    }

    /**
     * Edit method
     *
     * @param string|null $id Bank Invitro id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {

        $bankInvitro = $this->BankInvitro->find()->where(['BankInvitro.status !=' => '0','BankInvitro.id '=>$id])->first();

        $passport = $this->Passport->find()->where(['id '=>$bankInvitro->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if( $this->permiso['edit'] /*&& $validar*/ ){



            if($bankInvitro!=NULL){

                 $modulo=$this->mod_padre;
                 $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

                 $passport = $this->BankInvitro->Passport->find()->contain('Specie.Collection')->where(['Passport.status' => '1', 'Passport.resource_id' => 1, 'Passport.id' => $bankInvitro->passport_id])->first();

                if ($this->request->is(['patch', 'post', 'put'])) {

                    $data = $this->request->getData();
                    

                    if($data['tubenumb']!=null && $data['explnumb']!=null)
                        $data['stock']=$data['tubenumb']*$data['explnumb'] ;

                    $data['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));

                    try{

                        $bankInvitro = $this->BankInvitro->patchEntity($bankInvitro, $data);

                        if ($this->BankInvitro->save($bankInvitro)) {

                          $list_module = explode('/', $this->request->params['_matchedRoute']);

                          $user_id    = $this->Auth->User('id');
                          $module     = $list_module[(count($list_module)-3)];
                          $action     = $list_module[(count($list_module)-2)];
                          $station_id = $bankInvitro->id;
                          $recurso_id = '1';

                          $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                          $this->Flash->success(__('El Registro fue actualizado satisfactoriamente. LOTE: '.$bankInvitro->lotnumb));

                          return $this->redirect(['action' => 'index']);
                        }
                        $this->Flash->error(__('1 Hubo inconvenientes al actualizar el Regsitro. Por favor, Otra vez intente.'));

                       } catch (\Exception $e) {

                                $this->Flash->error(__('2 Hubo inconvenientes al actualizar el Regsitro. Por favor, Otra vez intente.'));
                                return $this->redirect(['action' => 'index']);
                       }
                }

                $tipo_disponibilidad= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 330, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $tipo_conservacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 307, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $conservacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 307, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $temperatura= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 310, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_estado_planta= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 276, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_necrosis= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 282, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_defolacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 287, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_enraizamiento= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 292, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_clorosis= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 297, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_fenolizacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 302, 'status' => 1, 'OR' => [['resource_id' => 4]]  ]);

                $lista_almacenamiento= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 333, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_propagacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 337, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_conservacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 344, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_tamanio_tubo= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 313, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                 $lista_estado_fitosanitario= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 316, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $titulo = $this->mod_padre;
                $parent = $this->mod_parent;

                $bankInvitro->acqdate = ($bankInvitro->acqdate == NULL) ? NULL : date('d-m-Y', strtotime($bankInvitro->acqdate));

                $this->set(compact('scripts','bankInvitro','titulo','parent','passport','modulo','tipo_disponibilidad','tipo_conservacion','conservacion','temperatura','lista_estado_planta','lista_necrosis','lista_defolacion','lista_enraizamiento','lista_clorosis','lista_fenolizacion','lista_almacenamiento','lista_propagacion','lista_conservacion','lista_tamanio_tubo','lista_estado_fitosanitario'));

                $this->set('_serialize', ['bankInvitro']);

              }else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index']);
              }

        } else {

        $this->Flash->error(__('Operación denegada.'));
        return $this->redirect(['action' => 'index']);
      }
    }

    /**
     * Delete method
     *
     * @param string|null $id Bank Invitro id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $bankInvitro = $this->BankInvitro->find()->where(['BankInvitro.status !=' => '0','BankInvitro.id '=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankInvitro->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($this->permiso['delete'] /*&& $validar*/ ){

            $this->request->is(['post', 'delete']);



            if($bankInvitro!=NULL){

                $bankInvitro['modified'] = date('Y-m-d H:i:s');
                $bankInvitro['status'] = 0;

                if ($this->BankInvitro->save($bankInvitro)) {

                    $inputInvitro = TableRegistry::get("InputInvitro");
                    $query = $inputInvitro->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_invitro_id' => $id])
                          ->execute();

                    $outputInvitro = TableRegistry::get("OutputInvitro");
                    $query = $outputInvitro->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_invitro_id' => $id])
                          ->execute();


                    $conservationInvitro = TableRegistry::get("ConservationInvitro");
                    $query = $conservationInvitro->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_invitro_id' => $id])
                          ->execute();


                    $propagationInvitro = TableRegistry::get("PropagationInvitro");
                    $query = $propagationInvitro->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_invitro_id' => $id])
                          ->execute();

                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                    $user_id    = $this->Auth->User('id');
                    $module     = $list_module[(count($list_module)-3)];
                    $action     = $list_module[(count($list_module)-2)];
                    $station_id = $bankInvitro->id;
                    $recurso_id = '1';

                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                    $this->Flash->success('El Banco Invitro fue eliminado satisfactoriamente', ['params' => ['alert' => 'success']]);

                }else {

                    $this->Flash->success('Hubo inconvenientes al eliminar el BANCO INVITRO seleccionado . Por favor, Otra vez intente.',['params' => ['alert' => 'error']]);
                }

                return $this->redirect(['action' => 'index']);
            }else{

                 $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index']);
            }

      } else {

        $this->Flash->error(__('Operación denegada.'));
        return $this->redirect(['action' => 'index']);
      }
  }
    public function exportartabla() {

    if ($this->request->is('post')) {					
			$conn = ConnectionManager::get('default');
			$condicion=" AND Passport.station_current_id=".$this->Auth->User('station_id');
			
			// Validar si tiene acceso a Ver todas las estaciones experimentales ***************************************************************************			
			if( $this->Auth->user('role_id') == 1 ){
				$condicion = "";
			}else {
				$sqlAcceso ="SELECT estado FROM permiso_estacion AS p WHERE p.idusuario =".$this->Auth->user('id');
				$stmtAcceso = $conn->prepare($sqlAcceso);
				$stmtAcceso->execute();
				
				if( $stmtAcceso->rowCount() > 0){
					$rowAcceso = $stmtAcceso->fetch();
					
					if($rowAcceso[0] == 1){
						$condicion=" ";
					}
				}
			}	 
			///*********************************	
			
			$sql="SELECT
          B.ID AS 'N°',
          B.LOTNUMB AS 'LOTE',
					P.ACCENUMB AS 'COD. ACCESIÓN',
          P.ACCNAME AS 'NOM. DE ACCESIÓN',
					P.OTHENUMB AS 'OTRO CÓDIGO',
					C.COLNAME AS 'COLECCIÓN',					
          CONCAT(S.GENUS,' ',S.SPECIES,' ',S.AUTOR) AS 'NOMBRE CIENTÍFICO',
          S.CROPNAME AS 'NOM. COMÚN',
          B.ACQDATE AS 'FECHA DE INTRODUCCIÓN',
          B.ORIGIN AS 'LUGAR DE PROCEDENCIA',
          B.RESPONSIBLE AS 'RESPONSABLE',
          CASE B.AVAILABILITY WHEN 331 THEN'SI' WHEN 332 THEN 'NO' END  AS 'LOTE DISPONIBLE',
          (SELECT name FROM option_list WHERE id=b.storoom) AS 'ALMACENAMIENTO',
					(SELECT name FROM option_list WHERE id=b.temp) AS 'TEMPERATURA C°',
          B.SHELVING AS 'ESTANDERIA',
          B.LEVELSHELV AS 'NIVEL',
					B.RACK AS 'GRADILLA',
          B.TUBENUMB AS 'CANTD DE TUBOS',
          B.EXPLNUMB AS 'NUM. DE EXPLANTES',
          (SELECT name FROM option_list WHERE id=B.TUBESIZE) AS 'TAMAÑO DEL TUBO',				
          B.DUPLINSTNAME AS 'UBICACIÓN DE LAS REPLICAS',
					B.dupnumb AS 'CANTD DE REPLICAS',
          (SELECT name FROM option_list WHERE id=B.plastate) AS 'ESTADO DE VIABILIDAD',
          (SELECT name FROM option_list WHERE id=b.necrosis) AS 'NECROSIS DE YEMA Y TALLO',
          (SELECT name FROM option_list WHERE id=b.defoliation) AS 'DEFOLIACIÓN',
          (SELECT name FROM option_list WHERE id=b.rooting) AS 'ENRAIZAMIENTO',
          (SELECT name FROM option_list WHERE id=b.chlorosis) AS 'CLOROSIS',
          (SELECT name FROM option_list WHERE id=b.phenolization) AS 'FENOLIZACIÓN',
          (SELECT name FROM option_list WHERE id=b.storage) AS 'TIPO DE MEDIO',
          b.protime AS 'TIEMPO MAXIMO',
          (SELECT name FROM option_list WHERE id=b.propagation) AS 'PROPAGACIÓN',
          (SELECT name FROM option_list WHERE id=b.conservation) AS 'CONSERVACIÓN',
		      (SELECT name FROM option_list WHERE id=b.fitostate) AS 'ESTADO FITOSANITARIO',
					b.pathogen AS 'FITOPATOGENOS',
          B.REMARKS AS 'OBSERVACIÓN'
					FROM
					bank_invitro B
					INNER JOIN passport P ON P.id=B.passport_id
					INNER JOIN specie S ON S.id=P.specie_id
					INNER JOIN collection C ON C.id=S.collection_id
					WHERE p.status!=0".$condicion." ORDER BY B.LOTNUMB DESC";
						
	
			$stmtData = $conn->prepare($sql);
			$stmtData->execute();
			
			if( $stmtData->rowCount() >= 1){
				
				$libros = $stmtData->fetchAll(PDO::FETCH_ASSOC);
			 
				$filename = "InvBancoInvitro.xlsx"; 

				/************************************ CREACION DEL EXCEL ***********************************/
				$objPHPExcel = new \PHPExcel();
				$objPHPExcel->setActiveSheetIndex(0);
				
				// Creación de las letras del abecedario
				for($i=65; $i<=90; $i++) {
					$letra[] = chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'A'.chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'B'.chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'C'.chr($i);
				}
				
				############################################# css para los titulos ######################################
				$estiloTitle = array(
          'font' => array(
                    'name'     => 'Arial Narrow',
                    'bold'     => true,
                    'italic'   => false,
                    'strike'   => false,
                    'size'     => 20,
                    'color' => array(
                        'rgb' => '000000'
                    )
            ),
            /*'borders' => array(
                        'allborders' => array(
                          'style' => \PHPExcel_Style_Border::BORDER_THIN
                        )
                    ),*/
            'alignment' =>  array(
              'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
              'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
              'rotation'   => 0,
              'wrap'       => TRUE
                  )
            );

            $estiloSubTitle = array(
                'font' => array(
                            'name'     => 'Arial Narrow',
                            'bold'     => true,
                            'italic'   => false,
                            'strike'   => false,
                            'size'     => 13,
                            'color' => array(
                                'rgb' => 'ffffff'
                            )
                    ),
                    'borders' => array(
                                'allborders' => array(
                                'style' => \PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),
                    'alignment' =>  array(
                    'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    'rotation'   => 0,
                    'wrap'       => TRUE
                    )
            );

            $estiloCabezera = array(
                'font' => array(
                            'name'     => 'Arial Narrow',
                            'bold'     => true,
                            'italic'   => false,
                            'strike'   => false,
                            'size'     => 9,
                            'color' => array(
                                'rgb' => '000000'
                            )
                    ),
                    'borders' => array(
                                'allborders' => array(
                                'style' => \PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),
                    'alignment' =>  array(
                    'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    'rotation'   => 0,
                    'wrap'       => TRUE
                    )
            );

            $estiloRegistros = array(
                'font' => array(
                            'name'     => 'Arial Narrow',
                            'bold'     => false,
                            'italic'   => false,
                            'strike'   => false,
                            'size'     => 10,
                            'color' => array(
                                'rgb' => '000000'
                            )
                    ),
                    'borders' => array(
                                'allborders' => array(
                                'style' => \PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),
                    'alignment' =>  array(
                    'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                    'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    'rotation'   => 0,
                    'wrap'       => TRUE
                    )
            );
				############################################# /css  para los titulos  #########################################
				
				/************** INICIO GENERACION DE LOS TITULOS *****************/
				$header =  array_keys($libros[0]); // array_keys($resultado[0]);
                 
                // Rename sheet
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A1:AI1");
               
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A1", "BANCO DE INVITRO - LISTA DE INVENTARIO ");
     
               //Subtitulos /// 
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A2:L3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A2", "INFORMACIÓN GENERAL");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("M2:V2");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("M2", "DATOS DEL MATERIAL");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("M3:Q3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("M3", "Medio de Conservación y Ubicación");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("R3:T3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("R3", "Stock del Material");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("U3:V3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("U3", "Duplicados de Seguridad");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("W2:AH2");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("W2", "DATOS DE LA PLANTA");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("W3:AB3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("W3", "Estado de la Planta");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AC3:AF3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AC3", "Medio de Cultivo");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AG3:AH3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AG3", "Estado Fitosanitario");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AI2:AI4");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AI2", "ANOTACIONES/OBSREVACIONES");
  
                       

                /** ALTURA DE LA FILA */
               $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
               $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(25);
               $objPHPExcel->getActiveSheet()->getRowDimension('3')->setRowHeight(28);
               $objPHPExcel->getActiveSheet()->getRowDimension('4')->setRowHeight(25);

               /** PARA BLOQUEAR COLUMNAS Y FILAS */
               $objPHPExcel->getActiveSheet()->freezePaneByColumnAndRow(0,5);

               $t = 1;

               for($i=0; $i<count($header); $i++){
                   $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$t-1].'4', $header[$i]);
                   //$objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($letra[$t-1])->setAutoSize(TRUE); 
                   $t++;
               }
    
               $objPHPExcel->getActiveSheet()->getStyle("A1:AI1")->applyFromArray($estiloTitle);
               $objPHPExcel->getActiveSheet()->getStyle("A2:AI3")->applyFromArray($estiloSubTitle);
               $objPHPExcel->getActiveSheet()->getStyle("A4:AI4")->applyFromArray($estiloCabezera);
       

                $objPHPExcel->getActiveSheet()
                                        ->getStyle('A2:L3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('2F75B5');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('A4:L4')                                  
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('D9E1F2');

                $objPHPExcel->getActiveSheet()
                                        ->getStyle('M2:V2')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('548235');
                 $objPHPExcel->getActiveSheet()
                                        ->getStyle('M3:V3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('70AD47');
                 $objPHPExcel->getActiveSheet()
                                        ->getStyle('M4:V4')                                  
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('E2EFDA');

                 $objPHPExcel->getActiveSheet()
                                        ->getStyle('W2:AH2')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                         ->setRGB('339966');                
                 $objPHPExcel->getActiveSheet()
                                        ->getStyle('W3:AH3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('57873A');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('W4:AH4')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('E2EFDA');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AI2:AI4')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('404040');

			 				
			  
         /************************* ANCHO DE COLUMNAS ***************************/

         $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(7);
         $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(8);
         $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
         $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
         $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
         $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
         $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(45);
         $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
         $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
         $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
         $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
         $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(10);
         $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(18);
         $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
         $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(12);
         $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(10);
         $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(10);
         $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(10);
         $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(10);
         $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(15);
         $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(15);
         $objPHPExcel->getActiveSheet()->getColumnDimension('V')->setWidth(15);
         $objPHPExcel->getActiveSheet()->getColumnDimension('W')->setWidth(18);
         $objPHPExcel->getActiveSheet()->getColumnDimension('X')->setWidth(20);
         $objPHPExcel->getActiveSheet()->getColumnDimension('Y')->setWidth(18);
         $objPHPExcel->getActiveSheet()->getColumnDimension('Z')->setWidth(18);
         $objPHPExcel->getActiveSheet()->getColumnDimension('AA')->setWidth(18);
         $objPHPExcel->getActiveSheet()->getColumnDimension('AB')->setWidth(18);
         $objPHPExcel->getActiveSheet()->getColumnDimension('AC')->setWidth(20);
         $objPHPExcel->getActiveSheet()->getColumnDimension('AD')->setWidth(17);
         $objPHPExcel->getActiveSheet()->getColumnDimension('AE')->setWidth(40);
         $objPHPExcel->getActiveSheet()->getColumnDimension('AF')->setWidth(40);
         $objPHPExcel->getActiveSheet()->getColumnDimension('AG')->setWidth(22);
         $objPHPExcel->getActiveSheet()->getColumnDimension('AH')->setWidth(22);
         $objPHPExcel->getActiveSheet()->getColumnDimension('AI')->setWidth(80);
        
         /************************* MOSTRAR FILTROS DE BUSQUEDA ***************************/
        $objPHPExcel->getActiveSheet()->setAutoFilter('A4:AH4');
        
        /************************* INICIO IMPRESION DEL CONTENIDO ***************************/
        $celda = 5;
				$cnt=1;     
                for($i=0; $i < count($libros); $i++){

					$content = array_values($libros[$i]);

					for($j = 0; $j<count($content); $j++){
                        $objPHPExcel->getActiveSheet()->getRowDimension($j+5)->setRowHeight(17);
                        $objPHPExcel->getActiveSheet()->getStyle(trim($letra[$j].($celda)), $cnt)->applyFromArray($estiloRegistros);

						if($j==0){
						$objPHPExcel->setActiveSheetIndex(0)->setCellValue(trim($letra[$j].($celda)), $cnt);
						$cnt++;}
						else{
                            
						$objPHPExcel->setActiveSheetIndex(0)->setCellValue(trim($letra[$j].($celda)), $content[$j]);}	  
					}
					$celda ++;
				}
				
        $objPHPExcel->getActiveSheet()->setTitle('Inventario Banco Invitro');
				
        /**************--- FIN   *****************/
				header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
				
				header('Content-Disposition: attachment;filename='.$filename .' ');
				header('Cache-Control: max-age=0');
				$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
				$objWriter->save('php://output');

				exit;

			}
		}
  	
		/************** FIN   *****************/
		$handle = fopen("no_data.txt", "w");
		fwrite($handle, "Consulta sin resultados .....");
		fclose($handle);

		header('Content-Type: application/octet-stream');
		header('Content-Disposition: attachment; filename='.basename('no_data.txt'));
		header('Expires: 0');
		header('Cache-Control: must-revalidate');
		header('Pragma: public');
		header('Content-Length: ' . filesize('no_data.txt'));
		readfile('no_data.txt');
		 
		exit;
	}

 /********* Action para la descarga de archivo de plantilla **********/
 public function export()
 {

     if($this->permiso['export']){
         $filePath = WWW_ROOT .'pass_plantillas'. DS . 'formato_invitro.xlsx';
         $this->response->file($filePath , array('download'=> true));

         return $this->response;

     }else {

         $this->Flash->error(__('Operación denegada.'));
         return $this->redirect(['action' => 'index']);
     }
 }


/********* Action para la carga de archivos de BankInvitro **********/
  public function import(){

    // if(1==1){
    if($this->permiso['import']){
      $passportFito = $this->PassportFito->newEntity();
      $passport = $this->Passport->newEntity();

      //$bankInvitro = $this->BankInvitro->newEntity();    
      $bankInvitro = $this->BankInvitro->newEntity(); 

         if ($this->request->is('post')) {

            $data =  $this->request->getData();
          // var_dump($data);exit;

            /****  Carga de archivo  ***/
            $dir_subida = WWW_ROOT.'gestion_inventario'.DS.'bank_invitro'.DS;     
            $fichero_subido = $dir_subida . basename($data['file_carga']['name']);
            $file_input = $data['file_carga']['name'];  // SE CARGA EL NOMBRE DEL ARCHIVO  
           // var_dump($file_input);exit;
            
            
            if(move_uploaded_file($data['file_carga']['tmp_name'], $fichero_subido)){
               
               $inputFileName = $fichero_subido;
               
               //Read your Excel workbook
                try {

                  $inputFileType = \PHPExcel_IOFactory::identify($inputFileName);
                  $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
                  $objPHPExcel = $objReader->load($inputFileName);

                  //  Get worksheet dimensions
                  $sheet = $objPHPExcel->getSheet(0);
                  $highestRow = $sheet->getHighestRow();

                  if($highestRow > 2){

                      $highestColumn = $sheet->getHighestColumn();
                      $total_column = \PHPExcel_Cell::columnIndexFromString($sheet->getHighestColumn());

                      //************************* NOMBRES DE LAS CABECERAS ***************************//

                      $header_excel = array('COD. ACCESIÓN (CODPER)','FECHA DE INTRODUCCIÓN','RESPONSABLE','PROCEDENECIA','LUGAR DE ALMACENAMIENTO','TEMPERATURA','ESTANDERIA',
                                          'NIVEL ESTANDERIA','GRADILLA','CANTD TUBOS','NUM EXPLANTES','STOCK','TAMAÑO DEL TUBO','UBICACIÓN REPLICAS',
                                          'CANTD REPLICAS','ESTADO VIABILIADAD','NECROSIS','DEFOLACIÓN','ENRAIZAMIENTO','CLOROSIS','FENOLIZACIÓN',
                                          'TIPO DE MEDIO','MEDIO PROPAGACIÓN','MEDIO CONSERVACIÓN','TIEMPO MAXIMO','ESTADO FITOSANITARIO','FITOPATOGENOS','OBSERVACIÓN');

                      if($total_column == 28){

                            $cont = 0;
                            for ($row = 2; $row < 3; $row++){

                                $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);

                                for ($i=0; $i < $total_column; $i++) {

                                    if($header_excel[$i] == trim($rowData[0][$i])){
                                        $cont++;
                                    }
                                }
                            }
                            /************************ SE VERIFICA LOS NOMBRES DE LAS CABECERAS ***********************/
                            if($cont == $total_column){
                                
                               $conn = ConnectionManager::get('default');
                               $uid = $this->Auth->User('id');
                               $sqlcount="";
                               $select_1="";

                              /******** SE ELIMINA LOS REGISTROS ANTERIORES ********/
                              $sql_1 = $conn->prepare(" DELETE FROM temp_bankinvitro WHERE resource_id = 1 AND user_id = ? ");
                              $sql_1->bindValue(1, $uid, PDO::PARAM_STR);
                              /*print_r($uid);*/
                              $sql_1->execute();
                               //  Loop through each row of the worksheet in turn
                              $datos=1;
                              for ($row = 3; $row <= $highestRow; $row++){

                                  $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);
                                  $temp = TableRegistry::get('TempBankInvitro');
                                  $temp_bankinvitro = $temp->newEntity();
                              
                                  $temp_bankinvitro->accenumb      = $rowData[0][0];
                                  
                                  if($rowData[0][1] == ''|| $rowData[0][1] == NULL){
                                      $temp_bankinvitro->fecha_intro   =$rowData[0][1];
                                  }else{
                                    // utilizo la función y obtengo el timestamp
                                    $timestamp_1 = \PHPExcel_Shared_Date::ExcelToPHP($rowData[0][1]);
                                    $fecha_php_1 = gmdate("Y-m-d", $timestamp_1);
                                    $temp_bankinvitro->fecha_intro = $fecha_php_1;
                                  }
                                                                                                
                                  $temp_bankinvitro->responsible   = $rowData[0][2];
                                  $temp_bankinvitro->origin        = $rowData[0][3];
                                  $temp_bankinvitro->storoom       = $rowData[0][4];
                                  $temp_bankinvitro->temp          = $rowData[0][5];
                                  $temp_bankinvitro->shelving      = $rowData[0][6];
                                  $temp_bankinvitro->levelshelv    = $rowData[0][7];
                                  $temp_bankinvitro->rack          = $rowData[0][8];
                                  $temp_bankinvitro->tubenumb      = $rowData[0][9];
                                  $temp_bankinvitro->explnumb      = $rowData[0][10];
                                  $temp_bankinvitro->stock         = $rowData[0][11];
                                  $temp_bankinvitro->tubesize      = $rowData[0][12];
                                  $temp_bankinvitro->duplinstname  = $rowData[0][13];
                                  $temp_bankinvitro->dupnumb       = $rowData[0][14];
                                  $temp_bankinvitro->plastate      = $rowData[0][15];
                                  $temp_bankinvitro->necrosis      = $rowData[0][16];
                                  $temp_bankinvitro->defoliation   = $rowData[0][17];
                                  $temp_bankinvitro->rooting       = $rowData[0][18];
                                  $temp_bankinvitro->chlorosis     = $rowData[0][19];
                                  $temp_bankinvitro->phenolization = $rowData[0][20];
                                  $temp_bankinvitro->storage       = $rowData[0][21];
                                  $temp_bankinvitro->propagation   = $rowData[0][22];
                                  $temp_bankinvitro->conservation  = $rowData[0][23];
                                  $temp_bankinvitro->protime       = $rowData[0][24];
                                  $temp_bankinvitro->fitostate     = $rowData[0][25];
                                  $temp_bankinvitro->pathogen      = $rowData[0][26];
                                  $temp_bankinvitro->remarks       = $rowData[0][27];
                                  $temp_bankinvitro->resource_id   = '1';
                                  $temp_bankinvitro->user_id       = $uid;
                                  $temp->save($temp_bankinvitro);

                                  $total_data = $datos;

                                      /*************** SE VALIDA Y EJECUTA STORE **************/
                                      $sqlcount="SELECT COUNT(P.ID) AS CANTIDAD FROM PASSPORT P
                                            INNER JOIN PASSPORT_FITO PF ON(PF.PASSPORT_ID=P.ID)
                                            AND(PF.AVAILABILITY=27) AND (PF.INVITRO=33)
                                            WHERE
                                            (P.ACCENUMB='".trim($temp_bankinvitro->accenumb)."') AND (P.STATUS=1)";

                                      $sql_4 = $conn->prepare($sqlcount);
                                      $sql_4 ->execute();
                                      $result = $sql_4->fetch('assoc');

                                      if($result['CANTIDAD']!=1){                                                                      
                                          $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong>REGISTRO: ".$temp_bankinvitro->accenumb." NO ACTIVADO</strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                          $select_1=$conn->prepare($sql_1);
                                          $select_1 -> execute(); 
                                     }else{
                                            ///***************  VALIDANDO LUGAR DE ALMACENAMIENTO   *******************///                                           
                                                                       
                                            $tipo_conservacion = "SELECT COUNT(ID) AS CANTD FROM OPTION_LIST WHERE(NAME LIKE '%".trim($rowData[0][4])."%' AND PARENT_ID=307 AND STATUS=1)";                  
                                            $sql_4 = $conn->prepare($tipo_conservacion);
                                            $sql_4 ->execute();
                                            $result_tipo = $sql_4->fetch('assoc');

                                            ///***************  VALIDANDO TEMPERATURA   *******************///   
                                            $temperatura = "SELECT COUNT(ID) AS CANTD_TEMP FROM OPTION_LIST WHERE(NAME LIKE '%".trim($rowData[0][5])."%' AND PARENT_ID=310 AND STATUS=1)";                  
                                            $sql_4 = $conn->prepare($temperatura);
                                            $sql_4 ->execute();
                                            $result_temp = $sql_4->fetch('assoc');


                                            if($result_tipo['CANTD']!=1){
                                                    $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong> DATO ERRONEO: ".$rowData[0][4]."</strong>',STOROOM='<strong style=\'color:red;\'>".$rowData[0][4]."<strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                                    $select_1=$conn->prepare($sql_1);
                                                    $select_1 -> execute();            
                                            }    
                                            elseif($rowData[0][4]==''){                                   
                                                    $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong>COLUMNA LUGAR DE ALMACENAMIENTO: VACIA</strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                                    $select_1=$conn->prepare($sql_1);
                                                    $select_1 -> execute();    
                                            }
                                            ///***************  VALIDANDO TEMPERATURA   *******************///   
                                            
                                           elseif($result_temp['CANTD_TEMP']!=1){
                                                    $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong> DATO ERRONEO: ".$rowData[0][5]."</strong>',TEMP='<strong style=\'color:red;\'>".$rowData[0][5]."<strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                                    $select_1=$conn->prepare($sql_1);
                                                    $select_1 -> execute();            
                                            }  
                                            elseif($rowData[0][5]==''){                                   
                                              $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong>COLUMNA TEMPERATURA: VACIA</strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                              $select_1=$conn->prepare($sql_1);
                                              $select_1 -> execute();    
                                            }  
                                            /***************  VALIDANDO ESTANDERIA   *******************/
                                            elseif($rowData[0][6]==''){                                   
                                                    $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong>COLUMNA ESTANDERIA: VACIA</strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                                    $select_1=$conn->prepare($sql_1);
                                                    $select_1 -> execute();    
                                            } 
                                            /***************  VALIDANDO NIVEL   *******************/
                                            elseif($rowData[0][7]==''){                                   
                                                    $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong>COLUMNA NIVEL ESTANDERIA: VACIA</strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                                    $select_1=$conn->prepare($sql_1);
                                                    $select_1 -> execute();    
                                            } 
                                            /***************  VALIDANDO GRADILLA   *******************/
                                            elseif($rowData[0][8]==''){                                   
                                                    $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong>COLUMNA GRADILLA: VACIA</strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                                    $select_1=$conn->prepare($sql_1);
                                                    $select_1 -> execute();    
                                            }  
                                            /***************  VALIDANDO CANTD TUBOS   *******************/
                                            elseif($rowData[0][9]==''){                                   
                                                    $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong>COLUMNA CANTD TUBOS: VACIA</strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                                    $select_1=$conn->prepare($sql_1);
                                                    $select_1 -> execute();    
                                            }  
                                            /***************  VALIDANDO NUM EXPLANTES   *******************/
                                            elseif($rowData[0][10]==''){                                   
                                                    $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong>COLUMNA NUM EXPLANTES: VACIA</strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                                    $select_1=$conn->prepare($sql_1);
                                                    $select_1 -> execute();    
                                            } 
                                            /***************  VALIDANDO TAMAÑO DEL TUBO *******************/
                                            elseif($rowData[0][12]==''){                                   
                                                    $sql_1= "UPDATE temp_bankinvitro SET MOTIVO_ERROR='<strong>COLUMNA TAMAÑO DEL TUBO: VACIA</strong>' WHERE (ACCENUMB='".$temp_bankinvitro->accenumb."')";
                                                    $select_1=$conn->prepare($sql_1);
                                                    $select_1 -> execute();    
                                            }         
											                             
                                     }
                                    $datos++;
                              
                                    }
                              
                              $temp_bankinvitro = $this->TempBankInvitro->find('all')->where(['user_id' => $uid, 'resource_id' => 1])->toArray();
  
                               $this->set(compact('file_input', 'bankInvitro', 'header_excel','temp_bankinvitro','$total_data'));

                               $this->Flash->success(__('Validación de campos Recurso Fitogenético realizado satisfactoriamente.'));
                              // unlink($inputFileName);

                            }else{
                              unlink($inputFileName);
                              $this->Flash->error(__('Los nombres de las cabeceras del archivo no corresponde al formato. Por favor, otra vez intente.'));
                              return $this->redirect(['action' => 'import']);                              
                            }
                      }else{
                        unlink($inputFileName);
                        $this->Flash->error(__('El total de columnas es distinta a la plantilla (28). Por favor, Otra vez intente. Cantidad de Columnas: '.$total_column));
                        return $this->redirect(['action' => 'import']);
                      }                   

                  }else {
                    unlink($inputFileName);
                    $this->Flash->error(__('El archivo no contiene registros. Por favor, Otra vez intente.'));
                    return $this->redirect(['action' => 'import']);
                }
                
                }catch(Exception $e) {

                  die('Error loading file "'.pathinfo($inputFileName,PATHINFO_BASENAME).'": '.$e->getMessage());
                }
    
            }else {
              unlink($inputFileName);
              $this->Flash->error(__('Hubo inconvenientes al cargar el archivo. Por favor, Otra vez intente.'));
              return $this->redirect(['action' => 'import']);
            } 
         }    
    }else {
      $this->Flash->error(__('Operación denegada.'));
      return $this->redirect(['action' => 'index']);
    }
  }
 /************ se graba en la base de datos los registros validos del excel ************/
 public function uploadfile()
 {
  
  if ($this->request->is('post')) {
     
         $bankInvitro = $this->BankInvitro->newEntity();
        
        $datas =  $this->request->getData();    
        $tipo_conservacion="";	
  		      
        //****  Carga de archivo  ***/
        $dir_subida = WWW_ROOT.'gestion_inventario'.DS.'bank_invitro'.DS;     
        $fichero_subido = $dir_subida . $datas['file_input'];

        $conn = ConnectionManager::get('default');
        $inputFileType = \PHPExcel_IOFactory::identify($fichero_subido);
        $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
        $objPHPExcel = $objReader->load($fichero_subido);
        //  Get worksheet dimensions
        $sheet = $objPHPExcel->getSheet(0);
        $highestRow = $sheet->getHighestRow();
        $highestColumn = $sheet->getHighestColumn();

        for ($row = 3; $row <= $highestRow; $row++){

          $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);
          $temp = TableRegistry::get('BankInvitro');
          $bankinvitro = $temp->newEntity();

          $bankinvitro->accenumb      = $rowData[0][0];

         /*************** SE VALIDA Y EJECUTA STORE **************/
         $sqlcount="SELECT COUNT(P.ID) AS CANTIDAD FROM PASSPORT P
                    INNER JOIN PASSPORT_FITO PF ON(PF.PASSPORT_ID=P.ID)
                    AND(PF.AVAILABILITY=27) AND (PF.INVITRO=33)
                    WHERE
                    (P.ACCENUMB='".trim($bankinvitro->accenumb)."') AND (P.STATUS=1)";
         $sql_4 = $conn->prepare($sqlcount);
         $sql_4 ->execute();
         $result = $sql_4->fetch('assoc');

         /*************** VALIDANDO LUGAR DE ALMACENAMIENTO **************/
         $tipo_conservacion = "SELECT COUNT(ID) AS CANTD_TIPO FROM OPTION_LIST WHERE(NAME LIKE '%".trim($rowData[0][4])."%' AND PARENT_ID=307 AND STATUS=1)";                  
         $sql_4 = $conn->prepare($tipo_conservacion);
         $sql_4 ->execute();
         $result_tipo = $sql_4->fetch('assoc');

         ///***************  VALIDANDO TEMPERATURA   *******************///   
         $temperatura = "SELECT COUNT(ID) AS CANTD_TEMP FROM OPTION_LIST WHERE(NAME LIKE '%".trim($rowData[0][5])."%' AND PARENT_ID=310 AND STATUS=1)";                  
         $sql_4 = $conn->prepare($temperatura);
         $sql_4 ->execute();
         $result_temp = $sql_4->fetch('assoc');
         
         if($result['CANTIDAD']==1 AND $result_tipo['CANTD_TIPO']==1 AND $result_temp['CANTD_TEMP']==1){

              $sql="SELECT P.ID AS ID FROM PASSPORT P
              INNER JOIN PASSPORT_FITO PF ON(PF.PASSPORT_ID=P.ID)
              AND(PF.AVAILABILITY=27) AND (PF.INVITRO=33)
              WHERE
              (P.ACCENUMB='".trim($bankinvitro->accenumb)."') AND (P.STATUS=1)";

              $sql = $conn->prepare($sql);
              $sql ->execute();
              $result = $sql->fetch('assoc');
              $passport_id=$result['ID'];  
              $passportid=$passport_id;              
          
              $bankinvitro->bank_availability  = '1';

              if($rowData[0][1] == ''|| $rowData[0][1] == NULL){
                  $bankinvitro->acqdate        = $rowData[0][1];
              }else{
               // utilizo la función y obtengo el timestamp
               $timestamp_1 = \PHPExcel_Shared_Date::ExcelToPHP($rowData[0][1]);
               $fecha_php_1 = gmdate("Y-m-d", $timestamp_1);
               $bankinvitro->acqdate            = $fecha_php_1;
              }
              $bankinvitro->availability        = '331';
              $bankinvitro->responsible         = $rowData[0][2];
              $bankinvitro->origin              = $rowData[0][3];                    
              
              // BÚSQUEDA DE ID TIPO DE ALMACENAMIENTO //
              if($rowData[0][4]<>''){     
                $tipo_conservacion = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][4].'%','parent_id' => 307, 'status' => 1])->all();
                foreach ($tipo_conservacion as $tipo_conservacion):
                  $bankinvitro->storoom         = $tipo_conservacion->id;
                endforeach;      
              }else{
                  $bankinvitro->storoom         = '';
              }

              // BÚSQUEDA DE ID TEMPERATURA //  
              if($rowData[0][5]<>''){ 
                $temperatura = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][5].'%','parent_id' => 310, 'status' => 1])->all();
                foreach ($temperatura as $temperatura):
                $bankinvitro->temp              = $temperatura->id;
                endforeach;
              }else{
                $bankinvitro->temp              = '';
              }
              
              $bankinvitro->shelving            = $rowData[0][6];
              $bankinvitro->levelshelv          = $rowData[0][7];
              $bankinvitro->rack                = $rowData[0][8];
              $bankinvitro->duplinstname        = $rowData[0][13];
              $bankinvitro->dupnumb             = $rowData[0][14];

              // BÚSQUEDA DE ID ESTADO DE LA PLANTA //
              if($rowData[0][15]<>''){   
                $lista_estado_planta = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][15].'%','parent_id' => 276, 'status' => 1])->all();
                foreach ($lista_estado_planta as $lista_estado_planta):
                  $bankinvitro->plastate        = $lista_estado_planta->id;
                endforeach;
              }else{
                   $bankinvitro->plastate       = '';
              } 

              // BÚSQUEDA DE ID NECROSIS //  
              if($rowData[0][16]<>''){  
                $lista_necrosis = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][16].'%','parent_id' => 282, 'status' => 1])->all();
                foreach ($lista_necrosis as $lista_necrosis):
                  $bankinvitro->necrosis        = $lista_necrosis->id;
                endforeach; 
              }else{
                  $bankinvitro->necrosis        = '';
              } 

              // BÚSQUEDA DE ID DEFOLIACION //
              if($rowData[0][17]<>''){  
                $lista_defolacion = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][17].'%','parent_id' => 287, 'status' => 1])->all();
                foreach ($lista_defolacion as $lista_defolacion):
                  $bankinvitro->defoliation     = $lista_defolacion->id;
                endforeach;
              }else{
                  $bankinvitro->defoliation     = '';
              }

              // BÚSQUEDA DE ID ENRAIZAMIENTO //  
              if($rowData[0][18]<>''){  
                $lista_enraizamiento = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][18].'%','parent_id' => 292, 'status' => 1])->all();
                foreach ($lista_enraizamiento as $lista_enraizamiento):
                  $bankinvitro->rooting       = $lista_enraizamiento->id;
                endforeach;
              }else{
                  $bankinvitro->rooting        = '';
              }   

              // BÚSQUEDA DE ID CLOROSIS //  
              if($rowData[0][19]<>''){ 
                $lista_clorosis = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][19].'%','parent_id' => 297, 'status' => 1])->all();
                foreach ($lista_clorosis as $lista_clorosis):
                  $bankinvitro->chlorosis       = $lista_clorosis->id;
                endforeach; 
              }else{
                  $bankinvitro->chlorosis         = '';
              }

              // BÚSQUEDA DE ID FENOLIZACION //  
              if($rowData[0][20]<>''){ 
                $lista_fenolizacion = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][20].'%','parent_id' => 302, 'status' => 1])->all();
                foreach ($lista_fenolizacion as $lista_fenolizacion):
                  $bankinvitro->phenolization   = $lista_fenolizacion->id;
                endforeach; 
              }else{
                  $bankinvitro->phenolization   = '';
              }

              // BÚSQUEDA DE ID TIPO DE MEDIO // 
              if($rowData[0][21]<>''){ 
                $lista_almacenamiento = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][21].'%','parent_id' => 333, 'status' => 1])->all();
                foreach ($lista_almacenamiento as $lista_almacenamiento):
                  $bankinvitro->storage         = $lista_almacenamiento->id;
                endforeach;
              }else{
                  $bankinvitro->storage         = '';
              }

              // BÚSQUEDA DE ID PROPAGACIÓN //  
              if($rowData[0][22]<>''){
                $lista_propagacion = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][22].'%','parent_id' => 337, 'status' => 1])->all();
                foreach ($lista_propagacion as $lista_propagacion):
                  $bankinvitro->propagation     = $lista_propagacion->id;
                endforeach;
              }else{
                  $bankinvitro->propagation     = '';  
              }

              $bankinvitro->protime             = $rowData[0][24];

              // BÚSQUEDA DE ID CONSERVACIÓN //
              if($rowData[0][23]<>''){ 
                $lista_conservacion = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][23].'%','parent_id' => 344, 'status' => 1])->all();
                foreach ($lista_conservacion as $lista_conservacion):
                  $bankinvitro->conservation    = $lista_conservacion->id;
                endforeach;
              }else{
                  $bankinvitro->conservation    = '';
              }  

              $bankinvitro->tubenumb            = $rowData[0][9];  
              $bankinvitro->explnumb            = $rowData[0][10]; 

              // BÚSQUEDA DE ID TAMAÑO DEL TUBO // 
              if($rowData[0][12]<>''){
                $lista_tamanio_tubo = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][12].'%','parent_id' => 313, 'status' => 1])->all();
                foreach ($lista_tamanio_tubo as $lista_tamanio_tubo):
                $bankinvitro->tubesize          = $lista_tamanio_tubo->id;
                endforeach; 
              }else{
                $bankinvitro->tubesize          = '';
              }  

              // BÚSQUEDA DE ID TAMAÑO DEL TUBO //  
              if($rowData[0][25]<>''){
                $lista_estado_fitosanitario = $this->OptionList->find()->where(['name like'=>'%'.$rowData[0][25].'%','parent_id' => 316, 'status' => 1])->all();
                foreach ($lista_estado_fitosanitario as $lista_estado_fitosanitario):
                $bankinvitro->fitostate         = $lista_estado_fitosanitario->id;
                endforeach;  
              }else{
                $bankinvitro->fitostate         = '';
              }

              $bankinvitro->pathogen            = $rowData[0][26];  
              $bankinvitro->remarks             = $rowData[0][27];  
              $bankinvitro->passport_id         = $passportid;
              $bankinvitro->status              = '1';

              if ($this->BankInvitro->save($bankinvitro)) {

                /***************** GRABA EL NRO DE LOTE - AUTOGENERADO === ID TABLA *****************/
                $temp = TableRegistry::get('BankInvitro');
                $temp_invitro = $temp->get($bankinvitro->id);
                $temp_invitro->lotnumb = $bankinvitro->id;
                $temp->save($temp_invitro);   
              }
            }
        }
         $this->Flash->success(__('Importación de Registros al Banco de In vitro se realizo satisfactoriamente.'));
         unlink($fichero_subido);
         return $this->redirect(['action' => 'index']);
     
    }
  }
}

