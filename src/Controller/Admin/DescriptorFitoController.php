<?php
namespace App\Controller\Admin;

use App\Controller\Admin\AppController;

use Cake\Datasource\ConnectionManager;
use Cake\ORM\Table;
use PDO;

/**
 * Descriptor Controller
 *
 * @property \App\Model\Table\DescriptorTable $Descriptor
 *
 * @method \App\Model\Entity\Descriptor[] paginate($object = null, array $settings = [])
 */
class DescriptorFitoController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_padre = "Fenotípica";
        $this->loadModel('Descriptor');
        $this->loadModel('Specie');
        $this->loadModel('DescriptorState');
        $this->loadModel('DescriptorValue');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => 'FenotipicaFito'])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index( $id = null )
    {

        if($this->permiso['index']){

                $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
                $scripts = ['assets/js/datatable/jquery.dataTables.min',
                            'assets/js/datatable/dataTables.bootstrap.min',
                            'assets/js/datatable/dataTables.select.min'];

                $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $id,'Collection.resource_id'=>1])->first();
                if($especie!=NULL){

                    $mod_padre  = $this->mod_padre;
                    $mod_parent = $especie->collection->colname.' - '.$especie->cropname;
                    $permiso    = $this->permiso;
                    $descriptor = $this->Descriptor->find()->contain(['Specie', 'Resource'])
                                       ->where(['Descriptor.specie_id' => $id, 'Descriptor.resource_id' => '1', 'Specie.cropname' => $especie->cropname, 'Descriptor.status' => '1'])->order(['Descriptor.id'=>'desc'])->all();


                    $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'styles', 'scripts', 'especie','permiso'));
                    $this->set('_serialize', ['descriptor']);

                }else {

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'FenotipicaFito']);

                }

        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'FenotipicaFito']);

        }
    }

    /**
     * View method
     *
     * @param string|null $id Descriptor id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($idx = null, $id = null)
    {

        $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.resource_id'=>1])->first();

        if ($especie!=NULL && $this->permiso['view']) {

            $descriptor = $this->Descriptor->find()->contain(['Specie','Resource'])->where(['Descriptor.id' => $id,'Descriptor.status' =>1,'Descriptor.resource_id'=>1,'Descriptor.specie_id'=>$idx])->first();

            if ($descriptor != NULL) {

                $mod_padre  = $this->mod_padre;
                $permiso    = $this->permiso;

                $this->set(compact('descriptor', 'especie', 'mod_padre','permiso'));
                $this->set('_serialize', ['descriptor']);

            } else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index',$idx]);
            }

         }else{

            //$this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index',$idx]);
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($idx = null)
    {

        $descriptor = $this->Descriptor->newEntity();

        $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.resource_id'=>1])->first();

        if ($especie !=NULL && $this->permiso['add']) {

        $mod_padre  = $this->mod_padre;
        $mod_parent = $especie->collection->colname.' - '.$especie->cropname;

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $posicion = $this->Descriptor->find()->innerJoinWith('Specie')->where(['Descriptor.specie_id' => $especie->id, 'Specie.collection_id' => $especie->collection_id])
                                         ->order(['Descriptor.position' => 'DESC'])->limit(1)->first();

            $data['status'] = '1';
            $data['resource_id'] = '1';
            $data['type'] = '1';
            // $data['value_type'] = '1';
            $data['specie_id'] = $especie->id;
            $data['position'] = $posicion['position'] + 1;

            $descriptor = $this->Descriptor->patchEntity($descriptor, $data);

            if ($this->Descriptor->save($descriptor)) {

                $list_module = explode('/', $this->request->params['_matchedRoute']);

                $user_id    = $this->Auth->User('id');
                $module     = $list_module[(count($list_module)-4)];
                $action     = $list_module[(count($list_module)-2)].'/'.$list_module[(count($list_module)-1)];
                $station_id = $descriptor->id;
                $recurso_id = '1';

                $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                $this->Flash->success(__('Descriptor '.$data['title'].' creado satisfactoriamente.'));

                return $this->redirect(['action' => 'index', 'id' => $especie->id]);
            }

            $this->Flash->error(__('Hubo inconvenientes al crear el Descriptor. Por favor, Otra vez intente.'));
        }

        $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

        $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'especie', 'scripts'));
        $this->set('_serialize', ['descriptor']);

        }else{

            //$this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'DescriptorFito',$idx]);
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Descriptor id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($idx = null, $id = null)
    {

        $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.resource_id'=>1])->first();

        if ($especie!=NULL && $this->permiso['edit']) {

                $descriptor = $this->Descriptor->find()->where(['Descriptor.status '=>'1','id' => $id,'Descriptor.resource_id'=>1,'Descriptor.specie_id' => $idx])->first();

                $mod_padre  = $this->mod_padre;
                $mod_parent = $especie->collection->colname.' - '.$especie->cropname;

                if($descriptor!=NULL){

                        if ($this->request->is(['patch', 'post', 'put'])) {

                            $descriptor = $this->Descriptor->patchEntity($descriptor, $this->request->getData());

                            if ($this->Descriptor->save($descriptor)) {

                                $list_module = explode('/', $this->request->params['_matchedRoute']);

                                $user_id    = $this->Auth->User('id');
                                $module     = $list_module[(count($list_module)-5)];
                                $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                                $station_id = $descriptor->id;
                                $recurso_id = '1';

                                $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                                $this->Flash->success(__('Los Datos del Descriptor se actualizaron satisfactoriamente.'));

                                return $this->redirect(['action' => 'index',  'id' => $especie->id]);
                            }

                            $this->Flash->error(__('Hubo inconvenientes al actualizar el Descriptor. Por favor, Otra vez intente.'));
                        }

                        $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

                        $this->set(compact('descriptor', 'especie', 'mod_padre', 'mod_parent', 'scripts'));
                        $this->set('_serialize', ['descriptor']);

                } else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'DescriptorFito',$idx]);

                }

        } else{

            return $this->redirect(['action' => 'index','controller'=>'DescriptorFito',$idx]);
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Descriptor id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($idx = null, $id = null)
    {
        if ($this->permiso['delete']) {

                $this->request->is(['post', 'delete']);

                $descriptor = $this->Descriptor->find()->where(['Descriptor.status '=>'1','id' => $id,'Descriptor.resource_id'=>1,'Descriptor.specie_id' => $idx])->first();

                $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.resource_id'=>1])->first();

                if($descriptor!= NULL && $especie!=NULL) {

                        /********** BUSCO SI EL DESCRIPTOR YA TIENE VALORES ASOCIADOS EN LA CARACTERIZACION *********/
                        $total_value = $this->DescriptorValue->find()->where(['descriptor_id' => $descriptor->id])->count();

                        if($total_value > 0){

                            $this->Flash->error(__('No se puede eliminar el Descriptor. Tiene registros asociados.'));

                        } else {

                            $descriptor['status'] = '0';

                            if ($this->Descriptor->save($descriptor)) {

                                $sql = $this->DescriptorState->find()->where(['descriptor_id' => $descriptor->id]);

                                $count_state = $sql->count();

                                if($count_state > 0){

                                    $this->DescriptorState->updateAll(['status' => '0'],['descriptor_id' => $descriptor->id]);
                                }

                                $list_module = explode('/', $this->request->params['_matchedRoute']);

                                $user_id    = $this->Auth->User('id');
                                $module     = $list_module[(count($list_module)-5)];
                                $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                                $station_id = $descriptor->id;
                                $recurso_id = '1';

                                $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                                $this->Flash->success(__('Descriptor fue eliminado satisfactoriamente.'));

                            } else {

                                $this->Flash->error(__('Hubo inconvenientes al eliminar el Descriptor. Por favor, Otra vez intente.'));
                            }
                        }

                        return $this->redirect(['action' => 'index', 'id' => $especie->id]);

                } else{

                    $this->Flash->error(__('Operación denegada.'));
                    return $this->redirect(['action' => 'index','controller'=>'DescriptorFito',$idx]);
                }

        } else{
            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'DescriptorFito',$idx]);
        }
    }

    public function caracterizacion($idx = null, $idy = null)
    {
        $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
        $scripts = ['assets/js/datatable/jquery.dataTables.min',
                    'assets/js/datatable/dataTables.bootstrap.min',
                    'assets/js/datatable/dataTables.select.min'];

        $mod_specie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.id' => $idy,'Collection.resource_id'=>1])->first();
    

        if( $mod_specie!=NULL) {

            $especie =$mod_specie->genus.' '.$mod_specie->species;
            $autor =$mod_specie->autor;
            $coleccion = $mod_specie->collection->colname;
            $permiso= $this->permiso;
            $conn = ConnectionManager::get('default');
            $stmt = $conn->prepare(' CALL usp_caracterizacion_table( ?, ?, 1 ) ');
            $stmt->bindValue(1, $idx, PDO::PARAM_INT);
            $stmt->bindValue(2, $idy, PDO::PARAM_INT);
            $stmt->execute();
            $resultado = $stmt->fetchAll('assoc');

            $this->set(compact('resultado', 'especie', 'coleccion','autor', 'styles', 'scripts','idx','idy','permiso'));
            // $this->Flash->error(__($idx.'-'.$idy));

        }else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'FenotipicaFito']);

        }
    }

    public function ordenar($idx = null, $idy = null)
    {

        if ($this->permiso['edit']) {

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];


            $especies = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.id' => $idy,'Collection.resource_id'=>1])->count();

            if($especies>0) {

                $mod_specie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.id' => $idy,'Collection.resource_id'=>1])->first();

                if ($this->request->is(['patch', 'post', 'put'])) {

                    $data =  $this->request->getData();

                    foreach ($data['descriptor_id'] as $key => $value) {

                        $key++;
                        $descriptor = $this->Descriptor->get($value);
                        $descriptor['position'] =$key;
                        $this->Descriptor->save($descriptor);
                    }

                    $this->Flash->success(__('Descriptor ordenado satisfactoriamente.'));

                    return $this->redirect(['action' => 'caracterizacion', 'idx' => $idx,'idy' => $idy]);
                }

                $titulo=' Caracterización - Ordenamiento de Descriptores';
                $titulo_lista ='Descriptores por Especie';
                $permiso    = $this->permiso;

                $descriptor_especie = $this->Descriptor->find()->contain('Specie.Collection')->where(['Descriptor.resource_id' => 1, 'Descriptor.status' => '1', 'Specie.id' => $idx,'Collection.id' => $idy])->order(['position' => 'ASC'])->all();

                $this->set(compact('mod_specie', 'styles', 'scripts','titulo','titulo_lista','descriptor_especie','idx','idy','permiso'));

            }else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'FenotipicaFito']);
            }

        }else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'FenotipicaFito']);
        }
    }

    // public function export($idx = null,$idy = null) {

    //     $mod_specie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.id' => $idy,'Collection.resource_id'=>1])->first();
    

    //     if( $mod_specie!=NULL) {

    //         $especie =$mod_specie->genus.' '.$mod_specie->species;
    //         $autor =$mod_specie->autor;
    //         $coleccion = $mod_specie->collection->colname;
    //         $permiso= $this->permiso;
    //         $conn = ConnectionManager::get('default');
    //         $stmt = $conn->prepare(' CALL usp_caracterizacion_table( ?, ?, 1 ) ');
    //         $stmt->bindValue(1, $idx, PDO::PARAM_INT);
    //         $stmt->bindValue(2, $idy, PDO::PARAM_INT);
    //         $stmt->execute();
    //         $resultado = $stmt->fetchAll('assoc');

    //         // $this->set(compact('resultado', 'especie', 'coleccion','autor', 'styles', 'scripts','idx','idy','permiso'));
    //         // $this->Flash->error(__($idx.'-'.$idy));

           

    //     }else{

    //         $this->Flash->error(__('Operación denegada.'));
    //         return $this->redirect(['action' => 'index','controller'=>'FenotipicaFito']);

    //     }
    // }



    // public function export($idx = null,$idy = null)
    // {
        
    //     $mod_specie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.id' => $idy,'Collection.resource_id'=>1])->first();



    //     if($mod_specie!=NULL){

    //             $descriptor = $this->Descriptor->newEntity();

    //             $mod_parent = $this->mod_parent;
    //             $mod_padre  = $this->mod_padre;

    //             $colecciones = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
    //                                             ->where(['resource_id' => 1, 'status' => '1', 'availability' => '1'])->order(['colname' => 'ASC']);
                
               
    //             $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

    //             if ($this->request->is('post')) {

    //                 $data =  $this->request->getData();

    //                 $especie = $this->Specie->find()->where([ 'id' => $idx, 'collection_id' => $idy])->first();

    //                 $leyenda = $this->Descriptor->find()->select(['name' => 'Descriptor.name', 'descripcion' => 'Descriptor.title', 'code' => 'DescriptorState.code', 'label' => 'DescriptorState.label'])
    //                                                         ->innerJoinWith('Specie')
    //                                                         ->leftJoinWith('DescriptorState')
    //                                                         ->where(['Descriptor.resource_id' => '1', 'Descriptor.specie_id' => $idx,
    //                                                                  'Descriptor.status' => '1', 'Specie.collection_id' => $idy, 'Specie.status' => '1'])
    //                                                         ->order(['Descriptor.name' => 'ASC', 'DescriptorState.code' => 'ASC'])->all();

                   
    //                 $conn = ConnectionManager::get('default');					
    //                 $user_id = $this->Auth->User('id');

    //                 /******************************** IMPRESION DEL FORMATO DE CARACTERIZACION *******************************/
    //                 $query = " CALL usp_formato_caracterizacion( ? , ? , 1 ) ";

    //                 $stmt = $conn->prepare($query);
    //                 $stmt->bindValue(1, $idx  , PDO::PARAM_INT);
    //                 $stmt->bindValue(2, $idy, PDO::PARAM_INT);
	// 				/*debug($data['especie_id']);
	// 				debug($data['coleccion_id']);
	// 				exit();*/
    //                 $stmt->execute();
    //                 $resultado = $stmt->fetchAll('assoc');
                    
                   

    //                 if(!empty($resultado)) {
                   
    //                     $objPHPExcel = new \PHPExcel();

    //                     /************************** PRIMERA HOJA - DESCRIPTORES Y PASAPORTES **************************/
    //                     $objPHPExcel->setActiveSheetIndex(0);

    //                     //************** Creación de las letras del abecedario *****************//
    //                     for($i=65; $i<=90; $i++) {
    //                         $letra[] = chr($i);
    //                     }
    //                     for($i=65; $i<=90; $i++) {
    //                         $letra[] = 'A'.chr($i);
    //                     }
    //                     for($i=65; $i<=90; $i++) {
    //                         $letra[] = 'B'.chr($i);
    //                     }
    //                     for($i=65; $i<=90; $i++) {
    //                         $letra[] = 'C'.chr($i);
    //                     }

    //                     ############################################# css para la tabla de datos de caracterización ######################################
    //                     $estiloTabla = array(
    //                         'font' => array(
    //                                   'name'     => 'Arial',
    //                                   'bold'     => false,
    //                                   'italic'   => false,
    //                                   'strike'   => false,
    //                                   'size'     => 10,
    //                                   'color' => array(
    //                                       'rgb' => '000000'
    //                                   )
    //                           ),
    //                           'borders' => array(
    //                               'allborders' => array(
    //                                 'style' => \PHPExcel_Style_Border::BORDER_THIN
    //                               )
    //                           ),
    //                         );

    //                     $estiloTablaTitle = array(
    //                             'font' => array(
    //                                       'name'     => 'Arial',
    //                                       'bold'     => true,
    //                                       'italic'   => false,
    //                                       'strike'   => false,
    //                                       'size'     => 15,
    //                                       'color' => array(
    //                                           'rgb' => '000000'
    //                                       )
    //                               ),
    //                               'borders' => array(
    //                                   'allborders' => array(
    //                                     'style' => \PHPExcel_Style_Border::BORDER_THIN
    //                                   )
    //                               ),

    //                               'alignment' =>  array(
    //                                 // 'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
    //                                 'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
    //                                 'rotation'   => 0,
    //                                 'wrap'       => TRUE
    //                               )
    //                         );  
    //                     $estiloTitleDes_1 = array(
    //                             'font' => array(
    //                                         'name'     => 'Arial',
    //                                         'bold'     => true,
    //                                         'italic'   => false,
    //                                         'strike'   => false,
    //                                         'size'     => 10,
    //                                         'color' => array(
    //                                             'rgb' => 'FFFFFF'
    //                                         )
    //                                 ),
    //                                 'borders' => array(
    //                                     'allborders' => array(
    //                                     'style' => \PHPExcel_Style_Border::BORDER_THIN
    //                                     )
    //                                 ),
    //                                 'alignment' =>  array(
    //                                 'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
    //                                 'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
    //                                 'rotation'   => 0,
    //                                 'wrap'       => TRUE
    //                                 )
    //                       );
    //                      $estiloTitleDes_2 = array(
    //                             'font' => array(
    //                                         'name'     => 'Arial',
    //                                         'bold'     => true,
    //                                         'italic'   => false,
    //                                         'strike'   => false,
    //                                         'size'     => 10,
    //                                         'color' => array(
    //                                             'rgb' => 'ffffff'
    //                                         )
    //                                 ),
    //                                 'borders' => array(
    //                                     'allborders' => array(
    //                                     'style' => \PHPExcel_Style_Border::BORDER_THIN
    //                                     )
    //                                 ),
    //                                 'alignment' =>  array(
    //                                 'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
    //                                 'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
    //                                 'rotation'   => 0,
    //                                 'wrap'       => TRUE
    //                                 )
    //                         );
    //                     ############################################# /css para la tabla #########################################

    //                     ############################################# css para la tabla ######################################
    //                     $estiloTitle = array(
    //                         'font' => array(
    //                                   'name'     => 'Arial',
    //                                   'bold'     => true,
    //                                   'italic'   => false,
    //                                   'strike'   => false,
    //                                   'size'     => 11,
    //                                   'color' => array(
    //                                       'rgb' => 'FFFFFF'
    //                                   )
    //                           ),
    //                           'borders' => array(
    //                               'allborders' => array(
    //                                 'style' => \PHPExcel_Style_Border::BORDER_THIN
    //                               )
    //                           ),
    //                           'alignment' =>  array(
    //                             'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
    //                             'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
    //                             'rotation'   => 0,
    //                             'wrap'       => TRUE
    //                           )
    //                     );
    //                ############################################# css para la tabla ######################################
    //                ############################################# css para la tabla ######################################

    //                $estiloTitlSt= array(
    //                 'font' => array(
    //                         'name'     => 'Arial',
    //                         'bold'     => true,
    //                         'italic'   => false,
    //                         'strike'   => false,
    //                         'size'     => 15,
    //                         'color' => array(
    //                             'rgb' => '000000'
    //                         )
    //                 ),
    //                 'alignment' =>  array(
    //                     // 'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
    //                     'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
    //                 'rotation'   => 0,
    //                 'wrap'       => TRUE
    //                 )
    //                 );
                

    //                $estiloBody = array(
    //                 'font' => array(
    //                         'name'     => 'Arial',
    //                         'bold'     => false,
    //                         'italic'   => false,
    //                         'strike'   => false,
    //                         'size'     => 10,
    //                         'color'    => array(
    //                             'rgb' => '000000'
    //                         )
    //                 ),
    //                 'borders' => array(
    //                     'allborders' => array(
    //                         'style' => \PHPExcel_Style_Border::BORDER_THIN
    //                     )
    //                 ),
    //                 'alignment' =>  array(
    //                 //   'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
    //                     'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
    //                     'rotation'   => 0,
    //                     'wrap'       => TRUE
    //                 )
    //                  );


    //                $estiloStade = array(
    //                 'font' => array(
    //                         'name'     => 'Arial',
    //                         'bold'     => false,
    //                         'italic'   => false,
    //                         'strike'   => false,
    //                         'size'     => 10,
    //                         'color'    => array(
    //                             'rgb' => '000000'
    //                         )
    //                 ),
    //                 'borders' => array(
    //                     'allborders' => array(
    //                         'style' => \PHPExcel_Style_Border::BORDER_THIN
    //                     )
    //                 ),
    //                 'alignment' =>  array(
    //                     'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
    //                     'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
    //                     'rotation'   => 0,
    //                     'wrap'       => TRUE
    //                 )
    //                 );

    //           ####################################### /css para la tabla #########################################

                        
    //                     $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A1:AI1");               
    //                     $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A1", "Datos de Caracterización: Nombre Cientifíco: ".$especie['genus'].' '.$especie['species'].' '.$especie['autor']);
    //                     $objPHPExcel->setActiveSheetIndex(0)->getStyle("A1:AI1")->applyFromArray($estiloTablaTitle);
              

    //                     /************** INICIO GENERACION DE LOS TITULOS *****************/
    //                     $header = array_keys($resultado[0]);
                        

    //                     $t = 1;

    //                     for($i=0; $i<count($header); $i++){

    //                         $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$t-1].'2', $header[$i]);
    //                         // $objPHPExcel->getActiveSheet()
    //                         //             ->getComment($letra[$t+2].'2')
    //                         //             ->getText()->createTextRun("prueba");
    //                         $t++;
    //                     }
    //                     /************** FIN   GENERACION DE LOS TITULOS *****************/
    //                     /** ALTURA DE LA FILA */
    //                     $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
    //                     $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);
                        

    //                     // $objPHPExcel->getActiveSheet(0)
    //                     //             ->getStyle('A1:CZ1000')
    //                     //             ->getFill()
    //                     //             ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
    //                     //             ->getStartColor()
    //                     //             ->setRGB('FFFFFF');

    //                     $objPHPExcel->getActiveSheet(0)                                   
    //                                 ->getStyle('A2:C2')
    //                                 ->getFill()
    //                                 ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
    //                                 ->getStartColor()
    //                                 ->setRGB('2F75B5');

    //                     /************************* INICIO IMPRESION DEL CONTENIDO ***************************/
    //                     $celda = 3;
    //                     for($i=0; $i < count($resultado); $i++){

    //                         $content = array_values($resultado[$i]);

    //                         for($j = 0; $j<count($content); $j++){

    //                             if($j < 3){

    //                                 $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $content[$j]);
    //                                 $objPHPExcel->getActiveSheet(0)->getStyle($letra[$j].$celda)->applyFromArray($estiloTabla);

    //                             } else {

    //                                 $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $content[$j]);
    //                                 $objPHPExcel->getActiveSheet(0)->getStyle($letra[$j].$celda)->applyFromArray($estiloTabla);
    //                             }
    //                         }

    //                         $celda ++;
    //                     }

    //                     $objPHPExcel->getActiveSheet(0)->getStyle('A2:C2')->applyFromArray($estiloTitleDes_1);
    //                     $objPHPExcel->getActiveSheet(0)->getStyle('D2:'.$letra[$t-2].'2')->applyFromArray($estiloTitleDes_2);
    //                     $objPHPExcel->getActiveSheet(0)                                   
    //                                 ->getStyle('D2:'.$letra[$t-2].'2')
    //                                 ->getFill()
    //                                 ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
    //                                 ->getStartColor()
    //                                 ->setRGB('548235'); 
    //                     $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('A')->setWidth(20); 
    //                     $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('B')->setWidth(20);
    //                     $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('C')->setWidth(20); 
    //                     /** PARA BLOQUEAR COLUMNAS Y FILAS */
    //                     $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(2,3);

    //                     for($i = 3; $i <= 90; $i++){
    //                         $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($letra[$i])->setWidth(16);
    //                     }

    //                     // Se asigna el nombre a la hoja
    //                     $objPHPExcel->getActiveSheet()->setTitle('DATOS DE CARACTERIZACIÓN');

                        

    //                     /****************************************** SEGUNDA HOJA - LEYENDA **********************************/

    //                     $objPHPExcel->createSheet();
    //                     $objPHPExcel->setActiveSheetIndex(1);

    //                     // TITULOS
                        
    //                     $objPHPExcel->getActiveSheet(1)->mergeCells("A1:D1");
    //                     $objPHPExcel->getActiveSheet(1)->setCellValue("A1", "LISTA DE DESCRIPTORES Y ESTADOS");
    //                     $objPHPExcel->getActiveSheet(1)->setCellValue('A2', 'ABREVIATURA');
    //                     $objPHPExcel->getActiveSheet(1)->setCellValue('B2', 'DESCRIPTOR');
    //                     $objPHPExcel->getActiveSheet(1)->setCellValue('C2', 'ESTADOS');
    //                     $objPHPExcel->getActiveSheet(1)->setCellValue('D2', 'DESCRIPCIÓN');

    //                     $objPHPExcel->getActiveSheet(1)->getStyle("A1:D1")->applyFromArray($estiloTitlSt);
    //                     $objPHPExcel->getActiveSheet(1)->getStyle('A2')->applyFromArray($estiloTitle);
    //                     $objPHPExcel->getActiveSheet(1)->getStyle('B2')->applyFromArray($estiloTitle);
    //                     $objPHPExcel->getActiveSheet(1)->getStyle('C2')->applyFromArray($estiloTitle);
    //                     $objPHPExcel->getActiveSheet(1)->getStyle('D2')->applyFromArray($estiloTitle);

                      

    //                       /** ALTURA DE LA FILA */
    //                     $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
    //                     $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(25);

    //                     /** ANCHO DE COLUMNAS **/
    //                     $objPHPExcel->getActiveSheet(1)->getColumnDimension('A')->setWidth(20);
    //                     $objPHPExcel->getActiveSheet(1)->getColumnDimension('B')->setWidth(40);
    //                     $objPHPExcel->getActiveSheet(1)->getColumnDimension('C')->setWidth(12);
    //                     $objPHPExcel->getActiveSheet(1)->getColumnDimension('D')->setWidth(35);

    //                     /** PARA BLOQUEAR COLUMNAS Y FILAS */
    //                     $objPHPExcel->getActiveSheet(1)->freezePaneByColumnAndRow(0,3);

                        
    //                      $objPHPExcel->getActiveSheet(1)
    //                                  ->getStyle('A1:AZ150')
    //                                  ->getFill()
    //                                  ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
    //                                  ->getStartColor()
    //                                  ->setRGB('FFFFFF');
                         
    //                      $objPHPExcel->getActiveSheet(1)
    //                                      ->getStyle('A2:B2')
    //                                      ->getFill(1)
    //                                      ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
    //                                      ->getStartColor()
    //                                      ->setRGB('2F75B5');

    //                      $objPHPExcel->getActiveSheet(1)
    //                                      ->getStyle('C2:D2')
    //                                      ->getFill()
    //                                      ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
    //                                      ->getStartColor()
    //                                      ->setRGB('548235');     
                                         
                                         
                       
 

    //                     $list_temp = [];

    //                     foreach ($leyenda as $key => $value) {
    //                         $list_temp[] = $value['name'];
    //                     }

    //                     $list = array_count_values($list_temp);
    //                     $list_unique = array_unique($list_temp);

    //                     $item  = 3;
    //                     foreach ($leyenda as $key => $value) {

    //                         $objPHPExcel->getActiveSheet()->setCellValue('A'.$item, strtoupper($value['name']));
    //                         $objPHPExcel->getActiveSheet()->setCellValue('B'.$item, $value['descripcion']);
    //                         $objPHPExcel->getActiveSheet()->setCellValue('C'.$item, $value['code']);
    //                         $objPHPExcel->getActiveSheet()->setCellValue('D'.$item, $value['label']);

    //                         $objPHPExcel->getActiveSheet(1)->getStyle('A'.$item)->applyFromArray($estiloBody);
    //                         $objPHPExcel->getActiveSheet(1)->getStyle('B'.$item)->applyFromArray($estiloBody);
    //                         $objPHPExcel->getActiveSheet(1)->getStyle('C'.$item)->applyFromArray($estiloStade);
    //                         $objPHPExcel->getActiveSheet(1)->getStyle('D'.$item)->applyFromArray($estiloBody);

    //                         $objPHPExcel->getActiveSheet()->getRowDimension($item)->setRowHeight(18);                            

    //                         $item++;
    //                     }

    //                     $list_inicio = [];

    //                     foreach ($list_unique as $key => $value) {
    //                         $list_inicio[] = $key + 3;
    //                     }

    //                     $list_final = [];

    //                     foreach ($list_unique as $key => $value) {
    //                         if($key > 0)
    //                             $list_final[] = $key + 2;
    //                     }

    //                     array_push($list_final, (count($leyenda)+2));

    //                     for ($i=0; $i < count($list_inicio); $i++) {
    //                         $objPHPExcel->setActiveSheetIndex(1)->mergeCells('A'.$list_inicio[$i].':A'.$list_final[$i]);
    //                         $objPHPExcel->setActiveSheetIndex(1)->mergeCells('B'.$list_inicio[$i].':B'.$list_final[$i]);
    //                     }

                      

    //                     $objPHPExcel->getActiveSheet()->setTitle('DESCRIPTORES Y ESTADOS');

    //                     $objPHPExcel->setActiveSheetIndex(0);

    //                     header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    //                     // $filename = "fito_feno_".$especie['cropname'].".xlsx";
    //                     $filename = "fito_feno_data_".$especie['cropname'].".xlsx";
    //                     header('Content-Disposition: attachment;filename='.$filename .' ');
    //                     header('Cache-Control: max-age=0');
    //                     $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
    //                     $objWriter->save('php://output');
    //                     exit;
    //                 }

    //                 else {

    //                     $this->Flash->error(__('No cuenta con Información Datos Pasaporte y/o Descriptores para la Colección y Especie seleccionada.'));
    //                     return $this->redirect(['action'=> 'importarCaracterizacion']);
    //                 }
    //             }

    //             $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'colecciones', 'scripts'));
    //             $this->set('_serialize', ['descriptor']);

    //     } else {

    //         $this->Flash->error(__('Operación denegada.'));
    //          return $this->redirect(['action' => 'index']);

    //     }
    // }


    public function export($idx = null,$idy = null)
    {
        if($this->permiso['export']){

                $descriptor = $this->Descriptor->newEntity();

                $mod_parent = $this->mod_parent;
                $mod_padre  = $this->mod_padre;

                // $colecciones = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
                //                                 ->where(['resource_id' => 1, 'status' => '1', 'availability' => '1'])->order(['colname' => 'ASC']);
                
               
                // $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

                if ($this->request->is('post')) {

                    $data =  $this->request->getData();

                    $especie = $this->Specie->find()->where([ 'id' => $idx, 'collection_id' => $idy ])->first();

                    $leyenda = $this->Descriptor->find()->select(['name' => 'Descriptor.name', 'descripcion' => 'Descriptor.title', 'code' => 'DescriptorState.code', 'label' => 'DescriptorState.label'])
                                                            ->innerJoinWith('Specie')
                                                            ->leftJoinWith('DescriptorState')
                                                            ->where(['Descriptor.resource_id' => '1', 'Descriptor.specie_id' => $idx,
                                                                     'Descriptor.status' => '1', 'Specie.collection_id' => $idy, 'Specie.status' => '1'])
                                                            ->order(['Descriptor.name' => 'ASC', 'DescriptorState.code' => 'ASC'])->all();

                   
                    $conn = ConnectionManager::get('default');					
                    $user_id = $this->Auth->User('id');

                    /******************************** IMPRESION DEL FORMATO DE CARACTERIZACION *******************************/
                    $query = " CALL usp_caracterizacion_table( ? , ? , 1 ) ";

                    $stmt = $conn->prepare($query);
                    $stmt->bindValue(1, $idx  , PDO::PARAM_INT);
                    $stmt->bindValue(2, $idy, PDO::PARAM_INT);
					/*debug($data['especie_id']);
					debug($data['coleccion_id']);
					exit();*/
                    $stmt->execute();
                    $resultado = $stmt->fetchAll('assoc');
                    
                   

                    if(!empty($resultado))
                    {
                        $objPHPExcel = new \PHPExcel();

                        /************************** PRIMERA HOJA - DESCRIPTORES Y PASAPORTES **************************/
                        $objPHPExcel->setActiveSheetIndex(0);

                        //************** Creación de las letras del abecedario *****************//
                        for($i=65; $i<=90; $i++) {
                            $letra[] = chr($i);
                        }
                        for($i=65; $i<=90; $i++) {
                            $letra[] = 'A'.chr($i);
                        }
                        for($i=65; $i<=90; $i++) {
                            $letra[] = 'B'.chr($i);
                        }
                        for($i=65; $i<=90; $i++) {
                            $letra[] = 'C'.chr($i);
                        }

                        ############################################# css para la tabla de datos de caracterización ######################################
                        $estiloTabla = array(
                            'font' => array(
                                      'name'     => 'Arial',
                                      'bold'     => false,
                                      'italic'   => false,
                                      'strike'   => false,
                                      'size'     => 10,
                                      'color' => array(
                                          'rgb' => '000000'
                                      )
                              ),
                              'borders' => array(
                                  'allborders' => array(
                                    'style' => \PHPExcel_Style_Border::BORDER_THIN
                                  )
                              ),
                            );

                        $estiloTablaTitle = array(
                                'font' => array(
                                          'name'     => 'Arial',
                                          'bold'     => true,
                                          'italic'   => false,
                                          'strike'   => false,
                                          'size'     => 15,
                                          'color' => array(
                                              'rgb' => '000000'
                                          )
                                  ),
                                  'borders' => array(
                                      'allborders' => array(
                                        'style' => \PHPExcel_Style_Border::BORDER_THIN
                                      )
                                  ),

                                  'alignment' =>  array(
                                    // 'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                    'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                    'rotation'   => 0,
                                    'wrap'       => TRUE
                                  )
                            );  
                        $estiloTitleDes_1 = array(
                                'font' => array(
                                            'name'     => 'Arial',
                                            'bold'     => true,
                                            'italic'   => false,
                                            'strike'   => false,
                                            'size'     => 10,
                                            'color' => array(
                                                'rgb' => 'FFFFFF'
                                            )
                                    ),
                                    'borders' => array(
                                        'allborders' => array(
                                        'style' => \PHPExcel_Style_Border::BORDER_THIN
                                        )
                                    ),
                                    'alignment' =>  array(
                                    'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                    'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                    'rotation'   => 0,
                                    'wrap'       => TRUE
                                    )
                          );
                         $estiloTitleDes_2 = array(
                                'font' => array(
                                            'name'     => 'Arial',
                                            'bold'     => true,
                                            'italic'   => false,
                                            'strike'   => false,
                                            'size'     => 10,
                                            'color' => array(
                                                'rgb' => 'ffffff'
                                            )
                                    ),
                                    'borders' => array(
                                        'allborders' => array(
                                        'style' => \PHPExcel_Style_Border::BORDER_THIN
                                        )
                                    ),
                                    'alignment' =>  array(
                                    'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                    'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                    'rotation'   => 0,
                                    'wrap'       => TRUE
                                    )
                            );
                        ############################################# /css para la tabla #########################################

                        ############################################# css para la tabla ######################################
                        $estiloTitle = array(
                            'font' => array(
                                      'name'     => 'Arial',
                                      'bold'     => true,
                                      'italic'   => false,
                                      'strike'   => false,
                                      'size'     => 11,
                                      'color' => array(
                                          'rgb' => 'FFFFFF'
                                      )
                              ),
                              'borders' => array(
                                  'allborders' => array(
                                    'style' => \PHPExcel_Style_Border::BORDER_THIN
                                  )
                              ),
                              'alignment' =>  array(
                                'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                'rotation'   => 0,
                                'wrap'       => TRUE
                              )
                        );
                   ############################################# css para la tabla ######################################
                   ############################################# css para la tabla ######################################

                   $estiloTitlSt= array(
                    'font' => array(
                            'name'     => 'Arial',
                            'bold'     => true,
                            'italic'   => false,
                            'strike'   => false,
                            'size'     => 15,
                            'color' => array(
                                'rgb' => '000000'
                            )
                    ),
                    'alignment' =>  array(
                        // 'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                        'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                    'rotation'   => 0,
                    'wrap'       => TRUE
                    )
                    );
                

                   $estiloBody = array(
                    'font' => array(
                            'name'     => 'Arial',
                            'bold'     => false,
                            'italic'   => false,
                            'strike'   => false,
                            'size'     => 10,
                            'color'    => array(
                                'rgb' => '000000'
                            )
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => \PHPExcel_Style_Border::BORDER_THIN
                        )
                    ),
                    'alignment' =>  array(
                    //   'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                        'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'rotation'   => 0,
                        'wrap'       => TRUE
                    )
                     );


                   $estiloStade = array(
                    'font' => array(
                            'name'     => 'Arial',
                            'bold'     => false,
                            'italic'   => false,
                            'strike'   => false,
                            'size'     => 10,
                            'color'    => array(
                                'rgb' => '000000'
                            )
                    ),
                    'borders' => array(
                        'allborders' => array(
                            'style' => \PHPExcel_Style_Border::BORDER_THIN
                        )
                    ),
                    'alignment' =>  array(
                        'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                        'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'rotation'   => 0,
                        'wrap'       => TRUE
                    )
                    );

              ####################################### /css para la tabla #########################################

                        
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A1:AI1");               
                        $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A1", "Datos de Caracterización: Nombre Cientifíco: ".$especie['genus'].' '.$especie['species'].' '.$especie['autor'].' ('.$especie['cropname'].')');
                        $objPHPExcel->setActiveSheetIndex(0)->getStyle("A1:AI1")->applyFromArray($estiloTablaTitle);
              

                        /************** INICIO GENERACION DE LOS TITULOS *****************/
                        $header = array_keys($resultado[0]);
                        

                        $t = 1;

                        for($i=0; $i<count($header); $i++){

                            if($i < 3){
                              $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$t-1].'2', strtoupper($header[$i]));
                            }else{
                                $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$t-1].'2', strtoupper($header[$i]));
                                
                                // $sqlTitles ="SELECT TITLE FROM DESCRIPTOR WHERE NAME='$header[$i]'";
                                // $stmTitles = $conn->prepare($sqlTitles);
                                // $stmTitles ->execute();
                                
                                // // $rowAcceso = $stmtData->fetch();
                                // // $title= $rowAcceso[0];	
															
                                // $objPHPExcel->getActiveSheet()
                                //             ->getComment($letra[$t-1].'2')
                                //             ->getText()->createTextRun($sqlTitles);
                            }
                            $t++;
                        }
                        /************** FIN   GENERACION DE LOS TITULOS *****************/
                        /** ALTURA DE LA FILA */
                        $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
                        $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(20);
                        

                        // $objPHPExcel->getActiveSheet(0)
                        //             ->getStyle('A1:CZ1000')
                        //             ->getFill()
                        //             ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                        //             ->getStartColor()
                        //             ->setRGB('FFFFFF');

                        $objPHPExcel->getActiveSheet(0)                                   
                                    ->getStyle('A2:C2')
                                    ->getFill()
                                    ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                    ->getStartColor()
                                    ->setRGB('2F75B5');

                        /************************* INICIO IMPRESION DEL CONTENIDO ***************************/
                        $celda = 3;
                        for($i=0; $i < count($resultado); $i++){

                            $content = array_values($resultado[$i]);

                            for($j = 0; $j<count($content); $j++){

                                if($j < 3){

                                    $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $content[$j]);
                                    $objPHPExcel->getActiveSheet(0)->getStyle($letra[$j].$celda)->applyFromArray($estiloTabla);

                                } else if($j > (count($content)-2)) {

                                    $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $content[$j]);
                                    $objPHPExcel->getActiveSheet(0)->getStyle($letra[$j].$celda)->applyFromArray($estiloTabla);
                                } 
                                 else{

                                    if($content[$j] == -1){
                                        $objPHPExcel->getActiveSheet(0)->getStyle($letra[$j].$celda)->applyFromArray($estiloTabla);
                                    }else{
                                        $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $content[$j]);
                                        $objPHPExcel->getActiveSheet(0)->getStyle($letra[$j].$celda)->applyFromArray($estiloTabla);
                                    }

                                }
                              
                            }

                            $celda ++;
                        }

                        $objPHPExcel->getActiveSheet(0)->getStyle('A2:C2')->applyFromArray($estiloTitleDes_1);
                        $objPHPExcel->getActiveSheet(0)->getStyle('D2:'.$letra[$t-2].'2')->applyFromArray($estiloTitleDes_2);
                        $objPHPExcel->getActiveSheet(0)                                   
                                    ->getStyle('D2:'.$letra[$t-2].'2')
                                    ->getFill()
                                    ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                    ->getStartColor()
                                    ->setRGB('548235'); 
                        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('A')->setWidth(20); 
                        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('B')->setWidth(20);
                        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension('C')->setWidth(20); 
                        /** PARA BLOQUEAR COLUMNAS Y FILAS */
                        $objPHPExcel->getActiveSheet(0)->freezePaneByColumnAndRow(2,3);

                        for($i = 3; $i <= 90; $i++){
                            $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($letra[$i])->setWidth(16);
                        }

                        // Se asigna el nombre a la hoja
                        $objPHPExcel->getActiveSheet()->setTitle('RESULTADOS DE CARACTERIZACIÓN');

                        

                        /****************************************** SEGUNDA HOJA - LEYENDA **********************************/

                        $objPHPExcel->createSheet();
                        $objPHPExcel->setActiveSheetIndex(1);

                        // TITULOS
                        
                        $objPHPExcel->getActiveSheet(1)->mergeCells("A1:D1");
                        $objPHPExcel->getActiveSheet(1)->setCellValue("A1", "LISTA DE DESCRIPTORES Y ESTADOS");
                        $objPHPExcel->getActiveSheet(1)->setCellValue('A2', 'ABREVIATURA');
                        $objPHPExcel->getActiveSheet(1)->setCellValue('B2', 'DESCRIPTOR');
                        $objPHPExcel->getActiveSheet(1)->setCellValue('C2', 'ESTADOS');
                        $objPHPExcel->getActiveSheet(1)->setCellValue('D2', 'DESCRIPCIÓN');

                        $objPHPExcel->getActiveSheet(1)->getStyle("A1:D1")->applyFromArray($estiloTitlSt);
                        $objPHPExcel->getActiveSheet(1)->getStyle('A2')->applyFromArray($estiloTitle);
                        $objPHPExcel->getActiveSheet(1)->getStyle('B2')->applyFromArray($estiloTitle);
                        $objPHPExcel->getActiveSheet(1)->getStyle('C2')->applyFromArray($estiloTitle);
                        $objPHPExcel->getActiveSheet(1)->getStyle('D2')->applyFromArray($estiloTitle);

                      

                          /** ALTURA DE LA FILA */
                        $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
                        $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(25);

                        /** ANCHO DE COLUMNAS **/
                        $objPHPExcel->getActiveSheet(1)->getColumnDimension('A')->setWidth(20);
                        $objPHPExcel->getActiveSheet(1)->getColumnDimension('B')->setWidth(40);
                        $objPHPExcel->getActiveSheet(1)->getColumnDimension('C')->setWidth(12);
                        $objPHPExcel->getActiveSheet(1)->getColumnDimension('D')->setWidth(45);

                        /** PARA BLOQUEAR COLUMNAS Y FILAS */
                        $objPHPExcel->getActiveSheet(1)->freezePaneByColumnAndRow(0,3);

                        
                         $objPHPExcel->getActiveSheet(1)
                                     ->getStyle('A1:AZ150')
                                     ->getFill()
                                     ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                     ->getStartColor()
                                     ->setRGB('FFFFFF');
                         
                         $objPHPExcel->getActiveSheet(1)
                                         ->getStyle('A2:B2')
                                         ->getFill(1)
                                         ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                         ->getStartColor()
                                         ->setRGB('2F75B5');

                         $objPHPExcel->getActiveSheet(1)
                                         ->getStyle('C2:D2')
                                         ->getFill()
                                         ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                         ->getStartColor()
                                         ->setRGB('548235');     
                                         
                                         
                       
 

                        $list_temp = [];

                        foreach ($leyenda as $key => $value) {
                            $list_temp[] = $value['name'];
                        }

                        $list = array_count_values($list_temp);
                        $list_unique = array_unique($list_temp);

                        $item  = 3;
                        foreach ($leyenda as $key => $value) {

                            $objPHPExcel->getActiveSheet()->setCellValue('A'.$item, strtoupper($value['name']));
                            $objPHPExcel->getActiveSheet()->setCellValue('B'.$item, $value['descripcion']);
                            $objPHPExcel->getActiveSheet()->setCellValue('C'.$item, $value['code']);
                            $objPHPExcel->getActiveSheet()->setCellValue('D'.$item, $value['label']);

                            $objPHPExcel->getActiveSheet(1)->getStyle('A'.$item)->applyFromArray($estiloBody);
                            $objPHPExcel->getActiveSheet(1)->getStyle('B'.$item)->applyFromArray($estiloBody);
                            $objPHPExcel->getActiveSheet(1)->getStyle('C'.$item)->applyFromArray($estiloStade);
                            $objPHPExcel->getActiveSheet(1)->getStyle('D'.$item)->applyFromArray($estiloBody);

                            $objPHPExcel->getActiveSheet()->getRowDimension($item)->setRowHeight(18);                            

                            $item++;
                        }

                        $list_inicio = [];

                        foreach ($list_unique as $key => $value) {
                            $list_inicio[] = $key + 3;
                        }

                        $list_final = [];

                        foreach ($list_unique as $key => $value) {
                            if($key > 0)
                                $list_final[] = $key + 2;
                        }

                        array_push($list_final, (count($leyenda)+2));

                        for ($i=0; $i < count($list_inicio); $i++) {
                            $objPHPExcel->setActiveSheetIndex(1)->mergeCells('A'.$list_inicio[$i].':A'.$list_final[$i]);
                            $objPHPExcel->setActiveSheetIndex(1)->mergeCells('B'.$list_inicio[$i].':B'.$list_final[$i]);
                        }

                      

                        $objPHPExcel->getActiveSheet()->setTitle('DESCRIPTORES Y ESTADOS');

                        $objPHPExcel->setActiveSheetIndex(0);

                        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
                        // $filename = "fito_feno_".$especie['cropname'].".xlsx";
                        $filename = "ResultCaracterizacion_".$especie['cropname'].".xlsx";
                        header('Content-Disposition: attachment;filename='.$filename .' ');
                        header('Cache-Control: max-age=0');
                        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
                        $objWriter->save('php://output');
                        exit;
                    }

                    else {

                        $this->Flash->error(__('No cuenta con Información Datos Pasaporte y/o Descriptores para la Colección y Especie seleccionada.'));
                        return $this->redirect(['action'=> 'importarCaracterizacion']);
                    }
                }

                $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'colecciones', 'scripts'));
                $this->set('_serialize', ['descriptor']);

        } else {

            $this->Flash->error(__('Operación denegada.'));
             return $this->redirect(['action' => 'index']);

        }
    }

    
    public function exportartabla($idx = null) {
               
        if ($this->request->is('post')) {
            $data = $this->request->getData();         		
			$conn = ConnectionManager::get('default');          

            ///*********************************
           
			$sql_descriptor="SELECT
                            DES.ID AS 'N°', 
                            UPPER(DES.NAME) AS 'ABREVIATURA',
                            DES.TITLE AS 'DESCRIPTOR',
                            DES.DESCRIPTION AS 'METODOLIÍA DE EVALUACIÓN',
                            IF(DES.VALUE_TYPE=1,'CUANTITATIVO','CUALITATIVO') AS 'TIPO',
                            COL.COLNAME AS 'COLECCIÓN',
                            CONCAT(ESP.GENUS,' ',ESP.SPECIES,' ', ESP.AUTOR) AS 'NOMBRE CIENTÍFICO'           
                            FROM DESCRIPTOR DES
                            INNER JOIN SPECIE ESP ON (ESP.ID = DES.SPECIE_ID)
                            INNER JOIN COLLECTION COL ON(COL.ID=ESP.COLLECTION_ID)
                            WHERE DES.SPECIE_ID='.$idx.' AND DES.STATUS=1"; 

            $stmtData = $conn->prepare($sql_descriptor);
			$stmtData->execute();

            $sql_estado=" SELECT
                            STA.ID AS 'N°',
                            UPPER(DES.NAME) AS 'ABREVIATURA',
                            DES.TITLE AS 'DESCRIPTOR',
                            STA.CODE AS 'ESTADO',
                            STA.LABEL AS 'NOMBRE DEL ESTADO'                          
                            FROM
                            DESCRIPTOR_STATE STA 
                            INNER JOIN DESCRIPTOR DES ON (DES.ID=STA.DESCRIPTOR_ID)
                            INNER JOIN SPECIE ESP ON (ESP.ID = DES.SPECIE_ID)
                            WHERE DES.SPECIE_ID='.$idx.' AND STA.STATUS=1 ORDER BY DES.TITLE,STA.CODE"; 

             $stmtDataSta = $conn->prepare($sql_estado);
             $stmtDataSta->execute();

        if($stmtData->rowCount() >= 1){

                    $libros = $stmtData->fetchAll(PDO::FETCH_ASSOC);
                                
                    $filename = "ListadeDescriptores.xlsx"; 

                    /************************************ CREACION DEL EXCEL ***********************************/
                    $objPHPExcel = new \PHPExcel();
                    $objPHPExcel->setActiveSheetIndex(0);
                                
                    
                    // Creación de las letras del abecedario
                    for($i=65; $i<=90; $i++) {
                        $letra[] = chr($i);
                    }
                    for($i=65; $i<=90; $i++) {
                        $letra[] = 'A'.chr($i);
                    }
                    for($i=65; $i<=90; $i++) {
                        $letra[] = 'B'.chr($i);
                    }
                    for($i=65; $i<=90; $i++) {
                        $letra[] = 'C'.chr($i);
                    }

                    ############################################# css para los titulos ######################################
                    $estiloTitle = array(
                        'font' => array(
                                'name'     => 'Arial Narrow',
                                'bold'     => true,
                                'italic'   => false,
                                'strike'   => false,
                                'size'     => 20,
                                'color' => array(
                                    'rgb' => '000000'
                                )
                        ),
                        /*'borders' => array(
                                    'allborders' => array(
                                        'style' => \PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),*/
                        'alignment' =>  array(
                            'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                            'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                            'rotation'   => 0,
                            'wrap'       => TRUE
                        )
                     );

                    $estiloSubTitle = array(
                        'font' => array(
                                    'name'     => 'Arial Narrow',
                                    'bold'     => true,
                                    'italic'   => false,
                                    'strike'   => false,
                                    'size'     => 13,
                                    'color' => array(
                                        'rgb' => 'ffffff'
                                    )
                            ),
                            'borders' => array(
                                        'allborders' => array(
                                        'style' => \PHPExcel_Style_Border::BORDER_THIN
                                        )
                                    ),
                            'alignment' =>  array(
                            'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                            'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                            'rotation'   => 0,
                            'wrap'       => TRUE
                            )
                    );

                    $estiloCabezera = array(
                        'font' => array(
                                    'name'     => 'Arial Narrow',
                                    'bold'     => true,
                                    'italic'   => false,
                                    'strike'   => false,
                                    'size'     => 9,
                                    'color' => array(
                                        'rgb' => 'ffffff'
                                    )
                            ),
                            'borders' => array(
                                        'allborders' => array(
                                        'style' => \PHPExcel_Style_Border::BORDER_THIN
                                        )
                                    ),
                            'alignment' =>  array(
                            'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                            'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                            'rotation'   => 0,
                            'wrap'       => TRUE
                            )
                    );

                    $estiloRegistros = array(
                        'font' => array(
                                    'name'     => 'Arial Narrow',
                                    'bold'     => false,
                                    'italic'   => false,
                                    'strike'   => false,
                                    'size'     => 10,
                                    'color' => array(
                                        'rgb' => '000000'
                                    )
                            ),
                            'borders' => array(
                                        'allborders' => array(
                                        'style' => \PHPExcel_Style_Border::BORDER_THIN
                                        )
                                    ),
                            'alignment' =>  array(
                            'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                            'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                            'rotation'   => 0,
                            'wrap'       => TRUE
                            )
                    );

            ############################################# /css  para los titulos  #########################################
                    
                /************** INICIO GENERACION DE LOS TITULOS *****************/
                $header =  array_keys($libros[0]); // array_keys($resultado[0]);
                    
                    // Rename sheet
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A1:G1");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A1", "LISTA DE DESCRIPTORES");
                //Subtitulos /// 
                // $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A2:G2");
                // $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A2", "");
                

                    /** ALTURA DE LA FILA */
                $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
                // $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(5);
                $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(25);

                /** PARA BLOQUEAR COLUMNAS Y FILAS */
                $objPHPExcel->getActiveSheet()->freezePaneByColumnAndRow(0,3);

                $t = 1;

                for($i=0; $i<count($header); $i++){
                    $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$t-1].'2', $header[$i]);
                    //$objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($letra[$t-1])->setAutoSize(TRUE); 
                    $t++;
                }
        
                $objPHPExcel->getActiveSheet()->getStyle("A1:G1")->applyFromArray($estiloTitle);
                // $objPHPExcel->getActiveSheet()->getStyle("A2:G2")->applyFromArray($estiloSubTitle);
                $objPHPExcel->getActiveSheet()->getStyle("A2:G2")->applyFromArray($estiloCabezera);

                    $objPHPExcel->getActiveSheet()
                                            ->getStyle('A2:G2')
                                            ->getFill()
                                            ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                            ->getStartColor()
                                            ->setRGB('375623');
                    // $objPHPExcel->getActiveSheet()
                    //                         ->getStyle('A3:G3')                                  
                    //                         ->getFill()
                    //                         ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                    //                         ->getStartColor()
                    //                         ->setRGB('375623');

                /************************* MOSTRAR FILTROS DE BUSQUEDA ***************************/
                $objPHPExcel->getActiveSheet()->setAutoFilter('A2:G2');

                /************************* ANCHO DE COLUMNAS ***************************/

                $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
                $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(150);
                $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(35);


                /************************* INICIO IMPRESION DEL CONTENIDO ***************************/
            
                    $celda = 3;
                    $cnt=1;     
                    for($i=0; $i < count($libros); $i++){

                        $content = array_values($libros[$i]);

                        for($j = 0; $j<count($content); $j++){
                            $objPHPExcel->getActiveSheet()->getRowDimension($j+3)->setRowHeight(17);
                            $objPHPExcel->getActiveSheet()->getStyle($letra[$j].($celda), $cnt)->applyFromArray($estiloRegistros);

                            if($j==0){
                            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $cnt);
                            $cnt++;}
                            else{
                                
                            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), 
                            $content[$j]);}	                            
                            
                        }

                        $celda ++;
                    }

                    $objPHPExcel->getActiveSheet()->setTitle('Descriptores');

      /******************************************** SEGUNDA HOJA - LEYENDA *****************************************/
                     $objPHPExcel->createSheet();
                     $objPHPExcel->setActiveSheetIndex(1);
                     $objPHPExcel->getActiveSheet()->setTitle('Estados');

                     $state = $stmtDataSta->fetchAll(PDO::FETCH_ASSOC);  
                     
         
                    // Creación de las letras del abecedario
                    for($m=65; $m<=90; $m++) {
                        $letra[] = chr($m);
                    }
                    for($m=65; $m<=90; $m++) {
                        $letra[] = 'A'.chr($m);
                    }
                    for($m=65; $m<=90; $m++) {
                        $letra[] = 'B'.chr($m);
                    }
                    for($m=65; $m<=90; $m++) {
                        $letra[] = 'C'.chr($m);
                    }
           ############################################# css para los titulos ######################################
             $estiloTitleSta = array(
                                        'font' => array(
                                                'name'     => 'Arial Narrow',
                                                'bold'     => true,
                                                'italic'   => false,
                                                'strike'   => false,
                                                'size'     => 20,
                                                'color' => array(
                                                    'rgb' => '000000'
                                                )
                                        ),
                                        /*'borders' => array(
                                                    'allborders' => array(
                                                        'style' => \PHPExcel_Style_Border::BORDER_THIN
                                                    )
                                                ),*/
                                        'alignment' =>  array(
                                            'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                                            'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                            'rotation'   => 0,
                                            'wrap'       => TRUE
                                        )
                            );
             $estiloCabezeraSta = array(
                                'font' => array(
                                            'name'     => 'Arial Narrow',
                                            'bold'     => true,
                                            'italic'   => false,
                                            'strike'   => false,
                                            'size'     => 9,
                                            'color' => array(
                                                'rgb' => '000000'
                                            )
                                    ),
                                    'borders' => array(
                                                'allborders' => array(
                                                'style' => \PHPExcel_Style_Border::BORDER_THIN
                                                )
                                            ),
                                    'alignment' =>  array(
                                    'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                    'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                    'rotation'   => 0,
                                    'wrap'       => TRUE
                                    )
                            );
                
             $estiloRegistrosSta = array(
                                'font' => array(
                                            'name'     => 'Arial Narrow',
                                            'bold'     => false,
                                            'italic'   => false,
                                            'strike'   => false,
                                            'size'     => 10,
                                            'color' => array(
                                                'rgb' => '000000'
                                            )
                                    ),
                                    'borders' => array(
                                                'allborders' => array(
                                                'style' => \PHPExcel_Style_Border::BORDER_THIN
                                                )
                                            ),
                                    'alignment' =>  array(
                                    'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                                    'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                    'rotation'   => 0,
                                    'wrap'       => TRUE
                                    )
                            );

             $celda = array(
                                'font' => array(
                                            'name'     => 'Arial Narrow',
                                            'bold'     => false,
                                            'italic'   => false,
                                            'strike'   => false,
                                            'size'     => 10,
                                            'color' => array(
                                                'rgb' => '000000'
                                            )
                                    ),
                                    'borders' => array(
                                                'allborders' => array(
                                                'style' => \PHPExcel_Style_Border::BORDER_THIN
                                                )
                                            ),
                                    'alignment' =>  array(
                                    'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                                    'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                    'rotation'   => 0,
                                    'wrap'       => TRUE
                                    )
                            );


     /************** INICIO GENERACION DE LOS TITULOS *****************/
             $headersta =  array_keys($state[0]); // array_keys($resultado[0]);
             // Rename sheet
             $objPHPExcel->setActiveSheetIndex(1)->mergeCells("A1:J1");
             $objPHPExcel->setActiveSheetIndex(1)->setCellValue("A1", "LISTA DE ESTADOS");
             //Subtitulos /// 
            //  $objPHPExcel->setActiveSheetIndex(1)->mergeCells("A2:J2");
            //  $objPHPExcel->setActiveSheetIndex(1)->setCellValue("A2", "INFORMACIÓN GENERAL");
             

                 /** ALTURA DE LA FILA */
             $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
            //  $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(30);
             $objPHPExcel->getActiveSheet()->getRowDimension('3')->setRowHeight(25);

             /** PARA BLOQUEAR COLUMNAS Y FILAS */
             $objPHPExcel->getActiveSheet()->freezePaneByColumnAndRow(0,4);

             $t = 1;

             for($i=0; $i<count($headersta); $i++){
                 $objPHPExcel->setActiveSheetIndex(1)->setCellValue($letra[$t-1].'3', $headersta[$i]);
                 //$objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($letra[$t-1])A->setAutoSize(TRUE); 
                 $t++;
             }
     
            $objPHPExcel->getActiveSheet()->getStyle("A1:E1")->applyFromArray($estiloTitleSta);    
            $objPHPExcel->getActiveSheet()->getStyle("A3:E3")->applyFromArray($estiloCabezeraSta);
            

            $objPHPExcel->getActiveSheet()
                                            ->getStyle('A2:E2')
                                            ->getFill()
                                            ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                            ->getStartColor()
                                            ->setRGB('375623');
            $objPHPExcel->getActiveSheet()
                                            ->getStyle('A3:E3')                                  
                                            ->getFill()
                                            ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                            ->getStartColor()
                                            ->setRGB('E2EFDA');

            /************************* MOSTRAR FILTROS DE BUSQUEDA ***************************/
            $objPHPExcel->getActiveSheet()->setAutoFilter('A3:E3');

            /************************* ANCHO DE COLUMNAS ***************************/

            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(60);
            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(10);
            $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
            

      /************************* INICIO IMPRESION DEL CONTENIDO ***************************/
            
         $celdasta = 4;
         $cntsta=1;     
         for($j=0; $j < count($state); $j++){
            

             $contents = array_values($state[$j]);

             for($g = 0; $g<count($contents); $g++){
                 $objPHPExcel->getActiveSheet()->getRowDimension($j+4)->setRowHeight(17);
                 $objPHPExcel->getActiveSheet()->getStyle($letra[$g].($celdasta), $cntsta)->applyFromArray($estiloRegistrosSta);

                 if($g==0){
                 $objPHPExcel->setActiveSheetIndex(1)->setCellValue($letra[$g].($celdasta), $cntsta);
                 $cntsta++;}
                 else{                     
                 $objPHPExcel->setActiveSheetIndex(1)->setCellValue($letra[$g].($celdasta), 
                 $contents[$g]);}	                 
                 
             }

             $celdasta ++;
         }
     /****************************************************************************************/

             $objPHPExcel->setActiveSheetIndex(0);
     /************************* FIN  ****************************/
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');                    
            header('Content-Disposition: attachment;filename='.$filename .' ');
            header('Cache-Control: max-age=0');
            $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save('php://output');
            exit;            
        }
        
     }

        /************** FIN   *****************/
		$handle = fopen("no_data.txt", "w");
		fwrite($handle, "Consulta sin resultados .....");
		fclose($handle);

		header('Content-Type: application/octet-stream');
		header('Content-Disposition: attachment; filename='.basename('no_data.txt'));
		header('Expires: 0');
		header('Cache-Control: must-revalidate');
		header('Pragma: public');
		header('Content-Length: ' . filesize('no_data.txt'));
		readfile('no_data.txt');
		  
		exit;
   
    }


    
    /******** Para autocompletar la lista de roles -- add user ********/
    public function getmodulo($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $permisos_rol = $this->ModuleRole->find('all')->where(['role_id' => $id])->toArray();

            echo(json_encode($permisos_rol));
        }
    }
			

}
