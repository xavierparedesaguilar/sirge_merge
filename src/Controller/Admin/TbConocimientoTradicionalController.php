<?php

namespace App\Controller\Admin;

use App\Controller\Admin\AppController;
use Cake\Datasource\ConnectionManager;
use Authentication\IdentityInterface;
use Cake\ORM\Entity;

/**
 * TbConocimientoTradicional Controller
 *
 * @property \App\Model\Table\TbConocimientoTradicionalTable $TbConocimientoTradicional
 *
 * @method \App\Model\Entity\TbConocimientoTradicional[] paginate($object = null, array $settings = [])
 */
class TbConocimientoTradicionalController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_modulo = "zona de agrobiodiversidad";
        $this->mod_title = "conocimiento tradicional";
        $this->loadModel('Zabd');
        $this->loadModel('TbConocimiento');
        $this->loadModel('TbConocimientoEmpleado');
        $this->loadModel('OptionList');
        $this->loadModel('TbCultivo');
        $this->loadModel('TbCultivoConocimiento');
        $this->loadModel('TbEtapa');
        $this->loadModel('TbEtapaConocimiento');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => 'Zabd'])->first();
        if (!empty($this->module))
            $this->permiso = $this->Functions->validarModulo($this->module->id);
    }
    public function sector($idx = null)
    {
        $idx = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        return $this->redirect(['action' => 'index', 'controller' => 'TbSector']);
    }
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */

    public function index($idx = null)
    {

        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();

        if ($Zabd != NULL && $this->permiso['index']) {

            $mod_modulo = $this->mod_modulo;
            $mod_title = $this->mod_title;
            $permiso = $this->permiso;

            $styles = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = [
                'assets/js/select2/select2',
                'assets/js/datatable/jquery.dataTables.min',
                'assets/js/datatable/dataTables.bootstrap.min',
                'assets/js/datatable/dataTables.select.min'
            ];

            // faltaria agregar el status
            $TbConocimientoTradicional = $this->TbConocimientoTradicional->find()->contain(['TbMetodo', 'TbSector', 'Zabd'])->where(['tb_zabd_id' => $Zabd->id, 'TbConocimientoTradicional.status' => 1])->all();
            $TbConocimientoEmpleado = $this->TbConocimientoEmpleado->find()->contain(['TbConocimientoTradicional', 'TbConocimiento'])->where(['TbConocimientoEmpleado.tb_conocimiento_tradicional_id' => 2, 'TbConocimientoEmpleado.status' => '1'])->all();
            $TbCultivoConocimiento = $this->TbCultivoConocimiento->find()->contain(['TbConocimientoTradicional', 'TbCultivo'])->where(['TbCultivoConocimiento.tb_conocimiento_tradicional_id' => 1, 'TbCultivoConocimiento.status' => '1'])->all();
            $TbEtapaConocimiento = $this->TbEtapaConocimiento->find()->contain(['TbConocimientoTradicional', 'TbEtapa'])->where(['TbEtapaConocimiento.tb_conocimiento_tradicional_id' => 1, 'TbEtapaConocimiento.status' => '1'])->all();

            foreach ($TbConocimientoEmpleado as $key => $value) {
                $conocimiento_id[] = ($value['tb_conocimiento']['conocimiento']);
            }
            foreach ($TbCultivoConocimiento as $key => $value) {
                $cultivo_id[] = ($value['tb_cultivo']['id']);
            }
            foreach ($TbEtapaConocimiento as $key => $value) {
                $etapa_id[] = ($value['tb_etapa']['id']);
            }
            // var_dump($conocimiento_id); exit;

            if ($TbConocimientoTradicional != NULL) {

                $this->set(compact('TbConocimientoTradicional', 'Zabd', 'conocimiento_id', 'TbCultivoConocimiento', 'TbEtapaConocimiento', 'mod_modulo', 'mod_title', 'styles', 'scripts', 'permiso'));
                $this->set('_serialize', ['TbConocimientoTradicional']);
            } else {

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index', 'controller' => 'Zabd']);
            }
        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index', 'controller' => 'Zabd']);
        }
    }

    /**
     * View method
     *
     * @param string|null $id Zabd Accesion id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($idx = null, $id = null)
    {
        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        if ($Zabd != NULL && $this->permiso['view']) {
            $mod_modulo = $this->mod_modulo;
            $mod_title = $this->mod_title;
            $permiso = $this->permiso;
            $TbConocimientoTradicional = $this->TbConocimientoTradicional->find()->contain(['TbMetodo', 'TbSector', 'Zabd'])
                ->where(['TbConocimientoTradicional.id' => $id, 'TbConocimientoTradicional.tb_zabd_id' => $idx, 'TbConocimientoTradicional.status' => '1'])
                ->first();
            $TbConocimientoEmpleado = $this->TbConocimientoEmpleado->find()->contain(['TbConocimientoTradicional', 'TbConocimiento'])->where(['TbConocimientoEmpleado.tb_conocimiento_tradicional_id' => $TbConocimientoTradicional->id, 'TbConocimientoEmpleado.status' => '1'])->all();

            $TbCultivoConocimiento = $this->TbCultivoConocimiento->find()->contain(['TbConocimientoTradicional', 'TbCultivo'])->where(['TbCultivoConocimiento.tb_conocimiento_tradicional_id' => $TbConocimientoTradicional->id, 'TbCultivoConocimiento.status' => '1'])->all();
            $TbEtapaConocimiento = $this->TbEtapaConocimiento->find()->contain(['TbConocimientoTradicional', 'TbEtapa'])->where(['TbEtapaConocimiento.tb_conocimiento_tradicional_id' => $TbConocimientoTradicional->id, 'TbEtapaConocimiento.status' => '1'])->all();
            $conocimiento_id = [];
            foreach ($TbConocimientoEmpleado as  $value) {
                $conocimiento_id[] = $value['tb_conocimiento']['conocimiento'];
                // $conocimiento_id[] = explode(',',$value['tb_conocimiento']['conocimiento']);
            }
            // var_dump($TbConocimientoEmpleado);exit;
            // var_dump($conocimiento_id); exit;
            // $conocimiento_id = explode(',',$conocimiento_id[]);
            foreach ($TbCultivoConocimiento as $key => $value) {
                $cultivo_id[] = ($value['tb_cultivo']['cultivo']);
            }
            foreach ($TbEtapaConocimiento as $key => $value) {
                $etapa_id[] = ($value['tb_etapa']['etapa']);
            }
            if ($TbConocimientoTradicional != NULL) {
                $this->set(compact('TbConocimientoTradicional', 'mod_modulo', 'mod_title', 'permiso', 'Zabd','TbConocimientoEmpleado','TbCultivoConocimiento','TbEtapaConocimiento'));
                // $this->set(compact('TbConocimientoTradicional', 'mod_modulo', 'mod_title', 'TbCultivo', 'TbSector', 'TbMetodo', 'TbConocimiento', 'conocimiento_id', 'cultivo_id', 'etapa_id', 'TbEtapa', 'nombreZabd', 'TbConocimientoEmpleado','TbCultivoConocimiento','Zabd'));
                $this->set('_serialize', ['TbConocimientoTradicional']);
            } else {
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index', 'controller' => 'TbConocimientoTradicional', $idx]);
            }
        } else {
            return $this->redirect(['action' => 'index', 'controller' => 'TbConocimientoTradicional', $idx]);
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($idx = null)
    {
        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        if ($Zabd != NULL && $this->permiso['add']) {
            $TbConocimientoTradicional = $this->TbConocimientoTradicional->newEntity();
            if ($this->request->is('post')) {
                $data = $this->request->getData();
                $data['tb_zabd_id'] = $Zabd->id;
                $TbConocimientoTradicional = $this->TbConocimientoTradicional->patchEntity($TbConocimientoTradicional, $data);
                if ($this->TbConocimientoTradicional->save($TbConocimientoTradicional)) {
                    $list_module = explode('/', $this->request->params['_matchedRoute']);
                    $user_id = $this->Auth->User('id');
                    $module = $list_module[(count($list_module) - 2)];
                    $action = $list_module[(count($list_module) - 1)];
                    $station_id = $TbConocimientoTradicional->id;
                    $recurso_id = '4';
                    // Agregar a Conocimiento Empleado
                    $cn = ConnectionManager::get('default');
                    foreach ($data['tb_conocimiento_id'] as $idConocimiento) {
                        $query = "INSERT INTO tb_conocimiento_empleado (tb_conocimiento_tradicional_id , tb_conocimiento_id) VALUES ($TbConocimientoTradicional->id , $idConocimiento);";
                        $add_conocimiento = $cn->prepare($query);
                        $add_conocimiento->execute();
                    }
                    // Agresgar los cultivos
                    foreach ($data['tb_cultivo_id'] as $idCultivo) {
                        $query = "INSERT INTO tb_cultivo_conocimiento (tb_conocimiento_tradicional_id , tb_cultivo_id) VALUES ($TbConocimientoTradicional->id , $idCultivo);";
                        $add_conocimiento = $cn->prepare($query);
                        $add_conocimiento->execute();
                    }
                    // Agresgar los etapas
                    foreach ($data['tb_etapa_id'] as $idEtapa) {
                        $query = "INSERT INTO tb_etapa_conocimiento (tb_conocimiento_tradicional_id , tb_etapa_id) VALUES ($TbConocimientoTradicional->id , $idEtapa);";
                        $add_conocimiento = $cn->prepare($query);
                        $add_conocimiento->execute();
                    }
                    // var_dump($data['tb_conocimiento_id']); exit();

                    // --
                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                    $this->Flash->success(__('Conocimiento tradicional creado satisfactoriamente.'));
                    return $this->redirect(['action' => 'index', 'idx' => $Zabd->id]);
                }
                $this->Flash->error(__('VERIFICAR QUE NO HAYA DUPLICIDAD (i).'));
            }
            $mod_modulo = $this->mod_modulo;
            $mod_title = $this->mod_title;
            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];
            $TbSector = $this->TbConocimientoTradicional->TbSector->find('list', ['keyField' => 'id', 'valueField' => 'sector'])->where(['TbSector.status' => '1']);
            $TbMetodo = $this->TbConocimientoTradicional->TbMetodo->find('list', ['keyFiled' => 'id', 'valueField' => 'metodo'])->where(['TbMetodo.status' => '1']);
            $TbConocimiento = $this->TbConocimiento->find('list', ['keyFiled' => 'id', 'valueField' => 'conocimiento'])->where(['TbConocimiento.status' => '1']);

            $TbCultivo = $this->TbCultivo->find('list', ['keyField' => 'id', 'valueField' => 'cultivo'])->where(['TbCultivo.status' => 1]);
            $TbEtapa = $this->TbEtapa->find('list', ['keyField' => 'id', 'valueField' => 'etapa'])->where(['TbEtapa.status' => 1]);
            $nombreZabd = $this->TbConocimientoTradicional->Zabd->find('list', ['keyFiled' => 'id', 'valueField' => 'nombre']);
            $this->set(compact('TbConocimientoTradicional', 'mod_modulo', 'mod_title', 'TbCultivo', 'TbSector', 'TbMetodo', 'TbConocimiento', 'TbEtapa', 'nombreZabd', 'Zabd'));
            $this->set('_serialize', ['TbConocimientoTradicional']);
        } else {
            // var_dump("ddd"); exit;
            return $this->redirect(['action' => 'index', 'controller' => 'TbConocimientoTradicional', $idx]);
        }
    }

    /**
     *
     * @param string|null $id Zabd Accesion id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($idx = null, $id = null)
    {
        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        $TbConocimiento = $this->TbConocimiento->find('list', ['keyFiled' => 'id', 'valueField' => 'conocimiento'])->where(['TbConocimiento.status' => '1']);
        $TbConocimientoEmpleado = $this->TbConocimientoEmpleado->find()->contain(['TbConocimientoTradicional', 'TbConocimiento'])->where(['TbConocimientoEmpleado.tb_conocimiento_tradicional_id' => $id, 'TbConocimientoEmpleado.status' => '1'])->all();
        $TbCultivoConocimiento = $this->TbCultivoConocimiento->find()->contain(['TbConocimientoTradicional', 'TbCultivo'])->where(['TbCultivoConocimiento.tb_conocimiento_tradicional_id' => $id, 'TbCultivoConocimiento.status' => '1'])->all();
        $TbEtapaConocimiento = $this->TbEtapaConocimiento->find()->contain(['TbConocimientoTradicional', 'TbEtapa'])->where(['TbEtapaConocimiento.tb_conocimiento_tradicional_id' => $id, 'TbEtapaConocimiento.status' => '1'])->all();

        // var_dump($TbCultivoConocimiento_all); exit;
        foreach ($TbConocimientoEmpleado as $key => $value) {
            $conocimiento_id[] = ($value['tb_conocimiento']['id']);
        }
        foreach ($TbCultivoConocimiento as $key => $value) {
            $cultivo_id[] = ($value['tb_cultivo']['id']);
        }
        foreach ($TbEtapaConocimiento as $key => $value) {
            $etapa_id[] = ($value['tb_etapa']['id']);
        }
        if ($Zabd != NULL && $this->permiso['add']) {
            $TbConocimientoTradicional = $this->TbConocimientoTradicional->find()->where(['TbConocimientoTradicional.id' => $id, 'TbConocimientoTradicional.status' => '1', 'tb_zabd_id' => $idx])->first();
            $TbSector = $this->TbConocimientoTradicional->TbSector->find('list', ['keyField' => 'id', 'valueField' => 'sector', 'limit' => 200]);
            if ($TbConocimientoTradicional != NULL) {
                if ($this->request->is(['patch', 'post', 'put'])) {
                    $data = $this->request->getData();
                    $data['tb_zabd_id'] = $Zabd->id;
                    $TbConocimientoTradicional = $this->TbConocimientoTradicional->patchEntity($TbConocimientoTradicional, $data);
                    if ($this->TbConocimientoTradicional->save($TbConocimientoTradicional)) {
                        $list_module = explode('/', $this->request->params['_matchedRoute']);
                        $user_id = $this->Auth->User('id');
                        $module = $list_module[(count($list_module) - 2)];
                        $action = $list_module[(count($list_module) - 1)];
                        $station_id = $TbConocimientoTradicional->id;
                        $recurso_id = '4';
                        $cn = ConnectionManager::get('default');
                        // Agregar a Conocimiento Empleado
                        if (isset($data['tb_conocimiento_id'])) {
                            $arrayConocimientoId = implode(',', $data['tb_conocimiento_id']);
                            $query = "CALL sp_update_conocimiento_empleado(" . $TbConocimientoTradicional->id . ",'$arrayConocimientoId');";
                            $add_conocimiento = $cn->prepare($query);
                            $add_conocimiento->execute();
                        }
                        // Agregar Cultivo_Conocimiento select2
                        if (isset($data['tb_cultivo_id'])) {
                            $arrayCultivoConocimientoId = implode(',', $data['tb_cultivo_id']);
                            $query = "CALL sp_update_cultivo_conocimiento(" . $TbConocimientoTradicional->id . ",'$arrayCultivoConocimientoId');";
                            $procedure = $cn->prepare($query);
                            $procedure->execute();
                        }
                        // Agregar Etapa_Conocimiento select2
                        if (isset($data['tb_etapa_id'])) {
                            $arrayId = implode(',', $data['tb_etapa_id']);
                            $query = "CALL sp_update_etapa_conocimiento(" . $TbConocimientoTradicional->id . ",'$arrayId');";
                            $excecute = $cn->prepare($query);
                            $excecute->execute();
                        }
                        // --
                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                        $this->Flash->success(__('Conocimiento tradicional Actualizado satisfactoriamente.'));
                        return $this->redirect(['action' => 'index', 'idx' => $Zabd->id]);
                    }
                    $this->Flash->error(__('VERIFICAR QUE NO HAYA DUPLICIDAD (i).'));
                }
                $mod_modulo = $this->mod_modulo;
                $mod_title = $this->mod_title;
                $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];
                $TbSector = $this->TbConocimientoTradicional->TbSector->find('list', ['keyField' => 'id', 'valueField' => 'sector'])->where(['TbSector.status' => '1']);
                $TbMetodo = $this->TbConocimientoTradicional->TbMetodo->find('list', ['keyFiled' => 'id', 'valueField' => 'metodo'])->where(['TbMetodo.status' => '1']);
                $TbConocimiento = $this->TbConocimiento->find('list', ['keyFiled' => 'id', 'valueField' => 'conocimiento'])->where(['TbConocimiento.status' => '1']);

                $TbCultivo = $this->TbCultivo->find('list', ['keyField' => 'id', 'valueField' => 'cultivo'])->where(['TbCultivo.status' => 1]);
                $TbEtapa = $this->TbEtapa->find('list', ['keyField' => 'id', 'valueField' => 'etapa'])->where(['TbEtapa.status' => 1]);
                $nombreZabd = $this->TbConocimientoTradicional->Zabd->find('list', ['keyFiled' => 'id', 'valueField' => 'nombre']);
                $this->set(compact('TbConocimientoTradicional', 'mod_modulo', 'mod_title', 'TbCultivo', 'TbSector', 'TbMetodo', 'TbConocimiento', 'conocimiento_id', 'cultivo_id', 'etapa_id', 'TbEtapa', 'nombreZabd', 'Zabd'));
                $this->set('_serialize', ['TbConocimientoTradicional']);
            } else {
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index', 'controller' => 'TbConocimientoTradicional', $idx]);
            }
        } else {
            return $this->redirect(['action' => 'index', 'controller' => 'TbConocimientoTradicional', $idx]);
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Zabd Accesion id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($idx = null, $id = null)
    {
        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        if ($Zabd != NULL && $this->permiso['delete']) {
            $this->request->is(['post', 'delete']);
            $TbConocimientoTradicional = $this->TbConocimientoTradicional->find()->where(['TbConocimientoTradicional.id' => $id, 'TbConocimientoTradicional.status' => '1', 'tb_zabd_id' => $idx])->first();
            if ($TbConocimientoTradicional == NULL) {
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index', 'controller' => 'TbConocimientoTradicional', $idx]);
            } else {
                $TbConocimientoTradicional['status'] = 0;
                if ($this->TbConocimientoTradicional->save($TbConocimientoTradicional)) {
                    $list_module = explode('/', $this->request->params['_matchedRoute']);
                    $user_id = $this->Auth->User('id');
                    $module = $list_module[(count($list_module) - 3)];
                    $action = $list_module[(count($list_module) - 2)];
                    $station_id = $TbConocimientoTradicional->id;
                    $recurso_id = '4';
                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                    $this->Flash->success(__('Conocimiento tradicional eliminada satisfactoriamente.'));
                } else {
                    $this->Flash->error(__('Hubo inconvenientes al eliminar la Conocimiento tradicional. Por favor, otra vez intente.'));
                }
                return $this->redirect(['action' => 'index', 'idx' => $TbConocimientoTradicional->tb_zabd_id]);
            }
        } else {
            return $this->redirect(['action' => 'index', 'controller' => 'TbConocimientoTradicional', $idx]);
        }
    }

    public function exportartabla($idx = null)
    {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT . 'reportes/' . $data['filename'] . '.xlsx';

            if (file_exists($filePath)) {

                $this->response->file($filePath, array('download' => true));

                return $this->response;
            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }
}
