<?php

namespace App\Controller\Admin;

use App\Controller\Admin\AppController;
use Cake\Datasource\ConnectionManager;
use Authentication\IdentityInterface;
use Cake\ORM\Entity;

/**
 * TbDiversidadFlora Controller
 *
 * @property \App\Model\Table\TbDiversidadFloraTable $TbDiversidadFlora
 *
 * @method \App\Model\Entity\TbDiversidadFlora[] paginate($object = null, array $settings = [])
 */
class TbDiversidadFloraController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_title = "diversidad de flora";
        $this->loadModel('Zabd');
        $this->loadModel('TbClase');
        $this->loadModel('TbRazas');
        $this->loadModel('TbConocimientoEmpleado');
        $this->loadModel('OptionList');
        $this->loadModel('TbComunidad');
        $this->loadModel('TbCentroPoblado');
        $this->loadModel('TbNombresComunes');
        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => 'Zabd'])->first();
        if (!empty($this->module))
            $this->permiso = $this->Functions->validarModulo($this->module->id);
        $this->mod_modulo = "zona de diversidad";
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */

    public function index($idx = null)
    {
        // var_dump("Heloo"); exit;
        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        if ($Zabd != NULL && $this->permiso['index']) {
            $mod_modulo = $this->mod_modulo;
            $mod_title = $this->mod_title;
            $permiso = $this->permiso;
            $styles = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = [
                'assets/js/select2/select2',
                'assets/js/datatable/jquery.dataTables.min',
                'assets/js/datatable/dataTables.bootstrap.min',
                'assets/js/datatable/dataTables.select.min'
            ];
            
            $TbDiversidadFlora = $this->TbDiversidadFlora->find()->
            contain(['TbCentroPoblado', 'TbClase',   'TbNombresComunes', 'TbNombresCientificos', 'TbFamilias', 'Zabd'])->
            where(['tb_zabd_id' => $Zabd->id, 'TbDiversidadFlora.status' => 1])->all();
            if ($TbDiversidadFlora != NULL) {
                
                $this->set(compact('TbDiversidadFlora', 'Zabd', 'mod_modulo', 'mod_title', 'styles', 'scripts', 'permiso'));
                $this->set('_serialize', ['TbDiversidadFlora']);
            } else {
                
                // var_dump("Hello"); exit();
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index', 'controller' => 'Zabd']);
            }
        } 
        else {

            $this->Flash->error(__('No tiene permisos.'));
            return $this->redirect(['action' => 'index', 'controller' => 'Zabd']);
        }
    }

    /**
     * View method
     *
     * @param string|null $id Zabd Accesion id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($idx = null, $id = null)
    {
        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        if ($Zabd != NULL && $this->permiso['view']) {
            $mod_modulo = $this->mod_modulo;
            $mod_title = $this->mod_title;
            $permiso = $this->permiso;
            $TbDiversidadFlora = $this->TbDiversidadFlora->find()->contain(['TbCentroPoblado', 'TbClase',   'TbNombresComunes', 'TbNombresCientificos', 'TbFamilias', 'Zabd'])
                ->where(['TbDiversidadFlora.id' => $id, 'TbDiversidadFlora.tb_zabd_id' => $idx, 'TbDiversidadFlora.status' => '1'])
                ->first();

            if ($TbDiversidadFlora != NULL) {
                $this->set(compact('TbDiversidadFlora', 'mod_modulo', 'mod_title', 'permiso', 'Zabd'));
                $this->set('_serialize', ['TbDiversidadFlora']);
            } else {
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index', 'controller' => 'TbDiversidadFlora', $idx]);
            }
        } else {
            return $this->redirect(['action' => 'index', 'controller' => 'TbDiversidadFlora', $idx]);
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($idx = null)
    {
        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        if ($Zabd != NULL && $this->permiso['add']) {
            $TbDiversidadFlora = $this->TbDiversidadFlora->newEntity();
            if ($this->request->is('post')) {
                $data = $this->request->getData();
                $data['tb_zabd_id'] = $Zabd->id;
                $TbDiversidadFlora = $this->TbDiversidadFlora->patchEntity($TbDiversidadFlora, $data);
                if ($this->TbDiversidadFlora->save($TbDiversidadFlora)) {
                    $list_module = explode('/', $this->request->params['_matchedRoute']);
                    $user_id = $this->Auth->User('id');
                    $module = $list_module[(count($list_module) - 2)];
                    $action = $list_module[(count($list_module) - 1)];
                    $station_id = $TbDiversidadFlora->id;
                    $recurso_id = '4';
                    // Agregar a Conocimiento Empleado
                    // $cn = ConnectionManager::get('default');
                    // foreach ($data['tb_conocimiento_id'] as $idConocimiento) {
                    //     $query = "INSERT INTO tb_conocimiento_empleado (tb_conocimiento_tradicional_id , tb_conocimiento_id) VALUES ($TbDiversidadFlora->id , $idConocimiento);";
                    //     $add_conocimiento = $cn->prepare($query);
                    //     $add_conocimiento->execute();
                    // }
                    // // Agresgar los cultivos
                    // foreach ($data['tb_cultivo_id'] as $idCultivo) {
                    //     $query = "INSERT INTO tb_cultivo_conocimiento (tb_conocimiento_tradicional_id , tb_cultivo_id) VALUES ($TbDiversidadFlora->id , $idCultivo);";
                    //     $add_conocimiento = $cn->prepare($query);
                    //     $add_conocimiento->execute();
                    // }
                    // // Agresgar los etapas
                    // foreach ($data['tb_etapa_id'] as $idEtapa) {
                    //     $query = "INSERT INTO tb_etapa_conocimiento (tb_conocimiento_tradicional_id , tb_etapa_id) VALUES ($TbDiversidadFlora->id , $idEtapa);";
                    //     $add_conocimiento = $cn->prepare($query);
                    //     $add_conocimiento->execute();
                    // }
                    // var_dump($data['tb_conocimiento_id']); exit();

                    // --
                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                    $this->Flash->success(__('Diversidad Fauna '.$data['nombre_local'].' creado satisfactoriamente.'));
                    return $this->redirect(['action' => 'index', 'idx' => $Zabd->id]);
                }
                $this->Flash->error(__('VERIFICAR QUE NO HAYA DUPLICIDAD.'));
            }
            $mod_modulo = $this->mod_modulo;
            $mod_title = $this->mod_title;
            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

            $TbCentroPoblado = $this->TbCentroPoblado->find('list', ['keyFiled' => 'id', 'valueField' => 'centro_poblado'])->contain(['TbComunidad'])->where(['TbCentroPoblado.status' => '1','TbComunidad.tb_zabd_id'=> $Zabd->id]);
            $TbClase = $this->TbClase->find('list', ['keyField' => 'id', 'valueField' => 'clase'])->where(['TbClase.status' => 1, 'tb_tipo_diversidad_id' => 4]);
            $TbNombresComunes = $this->TbNombresComunes->find('list', ['keyField' => 'id', 'valueField' => 'nombre_comun'])->where(['TbNombresComunes.status' => 1,'tb_tipo_diversidad_id' => 4]);
            $TbNombresCientificos = $this->TbDiversidadFlora->TbNombresCientificos->find('list', ['keyFiled' => 'id', 'valueField' => 'nombre_cientifico'])->where(['tb_tipo_diversidad_id' => 4]);
            $TbFamilias = $this->TbDiversidadFlora->TbFamilias->find('list', ['keyFiled' => 'id', 'valueField' => 'familia',])->where(['tb_tipo_diversidad_id' => 4]);
            // var_dump($TbFamilias); exit;
            $this->set(compact('TbDiversidadFlora', 'mod_modulo', 'mod_title', 'TbCentroPoblado', 'TbClase',    'TbNombresComunes',  'TbNombresCientificos', 'TbFamilias', 'Zabd'));
            $this->set('_serialize', ['TbDiversidadFlora']);
        } else {
            return $this->redirect(['action' => 'index', 'controller' => 'TbDiversidadFlora', $idx]);
        }
    }

    /**
     *
     * @param string|null $id Zabd Accesion id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($idx = null, $id = null)
    {
        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        // $TbRazas = $this->TbRazas->find('list', ['keyFiled' => 'id', 'valueField' => 'raza'])->where(['TbRazas.status' => '1']);
        // $TbConocimientoEmpleado = $this->TbConocimientoEmpleado->find()->contain(['TbDiversidadFlora', 'TbRazas'])->where(['TbConocimientoEmpleado.tb_conocimiento_tradicional_id' => $id, 'TbConocimientoEmpleado.status' => '1'])->all();
        // $TbCrianzasConocimiento = $this->TbCrianzasConocimiento->find()->contain(['TbDiversidadFlora', 'TbClase'])->where(['TbCrianzasConocimiento.tb_conocimiento_tradicional_id' => $id, 'TbCrianzasConocimiento.status' => '1'])->all();
        // $TbEtapaConocimiento = $this->TbEtapaConocimiento->find()->contain(['TbDiversidadFlora', 'TbParientesSilvestres'])->where(['TbEtapaConocimiento.tb_conocimiento_tradicional_id' => $id, 'TbEtapaConocimiento.status' => '1'])->all();
        // foreach ($TbConocimientoEmpleado as $key => $value) {
        //     $conocimiento_id[] = ($value['tb_conocimiento']['id']);
        // }
        // foreach ($TbCrianzasConocimiento as $key => $value) {
        //     $cultivo_id[] = ($value['tb_cultivo']['id']);
        // }
        // foreach ($TbEtapaConocimiento as $key => $value) {
        //     $etapa_id[] = ($value['tb_etapa']['id']);
        // }
        if ($Zabd != NULL && $this->permiso['add']) {
            $TbDiversidadFlora = $this->TbDiversidadFlora->find()->where(['TbDiversidadFlora.id' => $id, 'TbDiversidadFlora.status' => '1', 'tb_zabd_id' => $idx])->first();
            if ($TbDiversidadFlora != NULL) {
                if ($this->request->is(['patch', 'post', 'put'])) {
                    $data = $this->request->getData();
                    $data['tb_zabd_id'] = $Zabd->id;
                    $TbDiversidadFlora = $this->TbDiversidadFlora->patchEntity($TbDiversidadFlora, $data);
                    if ($this->TbDiversidadFlora->save($TbDiversidadFlora)) {
                        $list_module = explode('/', $this->request->params['_matchedRoute']);
                        $user_id = $this->Auth->User('id');
                        $module = $list_module[(count($list_module) - 2)];
                        $action = $list_module[(count($list_module) - 1)];
                        $station_id = $TbDiversidadFlora->id;
                        $recurso_id = '4';
                        // $cn = ConnectionManager::get('default');
                        // Agregar a Conocimiento Empleado
                        // $arrayConocimientoId = implode(',', $data['tb_conocimiento_id']);
                        // if ($data['tb_conocimiento_id']) {
                        //     $query = "CALL sp_update_conocimiento_empleado(" . $TbDiversidadFlora->id . ",'$arrayConocimientoId');";
                        //     $add_conocimiento = $cn->prepare($query);
                        //     $add_conocimiento->execute();
                        //     foreach ($data['tb_conocimiento_id'] as $idConocimiento) {
                        //         if ($idConocimiento != $conocimiento_id) {
                        //             $query = "INSERT INTO tb_conocimiento_empleado (tb_conocimiento_tradicional_id , tb_conocimiento_id) VALUES ($TbDiversidadFlora->id  , $idConocimiento);";
                        //             $add_conocimiento = $cn->prepare($query);
                        //             $add_conocimiento->execute();
                        //         }
                        //     }
                        // }
                        // // Agregar Cultivo_Conocimiento select2
                        // $arrayCultivoConocimientoId = implode(',', $data['tb_cultivo_id']);
                        // if ($data['tb_cultivo_id']) {
                        //     $query = "CALL sp_update_cultivo_conocimiento(" . $TbDiversidadFlora->id . ",'$arrayCultivoConocimientoId');";
                        //     $add_conocimiento = $cn->prepare($query);
                        //     $add_conocimiento->execute();
                        //     foreach ($data['tb_cultivo_id'] as $idCultivoConocimiento) {
                        //         if ($idCultivoConocimiento != $cultivo_id) {
                        //             $query = "INSERT INTO tb_cultivo_conocimiento (tb_conocimiento_tradicional_id , tb_cultivo_id) VALUES ($TbDiversidadFlora->id  , $idCultivoConocimiento);";
                        //             $add_conocimiento = $cn->prepare($query);
                        //             $add_conocimiento->execute();
                        //         }
                        //     }
                        // }
                        // // Agregar Etapa_Conocimiento select2
                        // if ($data['tb_etapa_id']) {
                        //     $Data = $data['tb_etapa_id'];
                        //     $arrayId = implode(',', $Data);
                        //     $query = "CALL sp_update_etapa_conocimiento(" . $TbDiversidadFlora->id . ",'$arrayId');";
                        //     $excecute = $cn->prepare($query);
                        //     $excecute->execute();
                        //     foreach ($Data as $getId) {
                        //         if ($getId != $etapa_id) {
                        //             $query = "INSERT INTO tb_etapa_conocimiento (tb_conocimiento_tradicional_id , tb_etapa_id) VALUES ($TbDiversidadFlora->id  , $getId);";
                        //             $excecute = $cn->prepare($query);
                        //             $excecute->execute();
                        //         }
                        //     }
                        // }
                        // --
                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                        $this->Flash->success(__('Diversidad Fauna '.$TbDiversidadFlora['nombre_local'].' Actualizado satisfactoriamente.'));
                        return $this->redirect(['action' => 'index', 'idx' => $Zabd->id]);
                    }
                    $this->Flash->error(__('VERIFICAR QUE NO HAYA DUPLICIDAD.'));
                }
                $mod_modulo = $this->mod_modulo;
                $mod_title = $this->mod_title;
                $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

                $TbCentroPoblado = $this->TbCentroPoblado->find('list', ['keyFiled' => 'id', 'valueField' => 'centro_poblado'])->contain(['TbComunidad'])->where(['TbCentroPoblado.status' => '1','TbComunidad.tb_zabd_id'=> $Zabd->id]);
                $TbClase = $this->TbClase->find('list', ['keyField' => 'id', 'valueField' => 'clase'])->where(['TbClase.status' => 1]);
                $TbRazas = $this->TbRazas->find('list', ['keyFiled' => 'id', 'valueField' => 'raza'])->where(['TbRazas.status' => '1']);
                $TbNombresComunes = $this->TbNombresComunes->find('list', ['keyField' => 'id', 'valueField' => 'nombre_comun'])->where(['TbNombresComunes.status' => 1,'tb_tipo_diversidad_id' => 4]);
                $TbNombresCientificos = $this->TbDiversidadFlora->TbNombresCientificos->find('list', ['keyFiled' => 'id', 'valueField' => 'nombre_cientifico'])->where(['tb_tipo_diversidad_id' => 4]);
                $TbFamilias = $this->TbDiversidadFlora->TbFamilias->find('list', ['keyFiled' => 'id', 'valueField' => 'familia',])->where(['tb_tipo_diversidad_id' => 4]);
                // var_dump($TbFamilias); exit;
                $this->set(compact('TbDiversidadFlora', 'mod_modulo', 'mod_title', 'TbCentroPoblado', 'TbClase',    'TbNombresComunes',  'TbNombresCientificos', 'TbFamilias', 'Zabd'));
                $this->set('_serialize', ['TbDiversidadFlora']);
            } else {
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index', 'controller' => 'TbDiversidadFlora', $idx]);
            }
        } else {
            return $this->redirect(['action' => 'index', 'controller' => 'TbDiversidadFlora', $idx]);
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Zabd Accesion id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($idx = null, $id = null)
    {
        $Zabd = $this->Zabd->find()->where(['Zabd.id' => $idx, 'Zabd.status' => '1'])->first();
        if ($Zabd != NULL && $this->permiso['delete']) {
            $this->request->is(['post', 'delete']);
            $TbDiversidadFlora = $this->TbDiversidadFlora->find()->where(['TbDiversidadFlora.id' => $id, 'TbDiversidadFlora.status' => '1', 'tb_zabd_id' => $idx])->first();
            if ($TbDiversidadFlora == NULL) {
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index', 'controller' => 'TbDiversidadFlora', $idx]);
            } else {
                $TbDiversidadFlora['status'] = 0;
                if ($this->TbDiversidadFlora->save($TbDiversidadFlora)) {
                    $list_module = explode('/', $this->request->params['_matchedRoute']);
                    $user_id = $this->Auth->User('id');
                    $module = $list_module[(count($list_module) - 3)];
                    $action = $list_module[(count($list_module) - 2)];
                    $station_id = $TbDiversidadFlora->id;
                    $recurso_id = '4';
                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                    $this->Flash->success(__('Diversidad Fauna '.$TbDiversidadFlora['nombre_local'].' eliminada satisfactoriamente.'));
                } else {
                    $this->Flash->error(__('Hubo inconvenientes al eliminar la Diversidad Fauna '.$TbDiversidadFlora['nombre_local'].'. Por favor, otra vez intente.'));
                }
                return $this->redirect(['action' => 'index', 'idx' => $TbDiversidadFlora->tb_zabd_id]);
            }
        } else {
            return $this->redirect(['action' => 'index', 'controller' => 'TbDiversidadFlora', $idx]);
        }
    }

    public function exportartabla($idx = null)
    {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT . 'reportes/' . $data['filename'] . '.xlsx';

            if (file_exists($filePath)) {

                $this->response->file($filePath, array('download' => true));

                return $this->response;
            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }
}
